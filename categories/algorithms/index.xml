<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Algorithms on Chang Luo</title>
    <link>https://luochang212.github.io/categories/algorithms/</link>
    <description>Recent content in Algorithms on Chang Luo</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 01 Dec 2024 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://luochang212.github.io/categories/algorithms/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>流式聚类算法：DenStream 和 CluStream</title>
      <link>https://luochang212.github.io/posts/stream_clustering/</link>
      <pubDate>Sun, 01 Dec 2024 00:00:00 +0000</pubDate>
      <guid>https://luochang212.github.io/posts/stream_clustering/</guid>
      <description>直接说结论：全量聚类用 DBSCAN；无监督流式聚类用 DenStream；已知聚类数、按较大时间间隔获取聚类标签且对计算量敏感，用 CluStream.&#xA;GitHub 项目地址：stream-clustering&#xA;本文涉及的内容包括：&#xA;提供 DBSCAN、DenStream 和 CluStream 三种聚类算法的使用示例 开发对 DBSCAN 自动调参并输出聚类标签的函数 auto_dbscan 验证 DenStream 的推理结果（簇号）是否在学习过程中发生变化：会变 DBSCAN、DenStream 和 CluStream 全量训练效果对比：DBSCAN 最好 DenStream 和 CluStream 增量训练效果对比：DenStream 最好 ✨ 注意：运行以下代码依赖 utils.py 文件。&#xA;一、DBSCAN DBSCAN 是一种基于密度的聚类算法，用于从大量数据中识别出高密度区域并将其分为不同的簇。与传统的基于划分的聚类算法（如 K-means）不同，DBSCAN 不需要预先指定簇的数量，并且能够识别噪声数据和异常值。&#xA;DBSCAN 算法介绍 DBSCAN 的简单示例 DBSCAN 的可选参数 DBSCAN 自动调参： 基于 K 距离图选择 eps 选择 min_samples 的经验法则 使用网格搜索结合合适的评估指标 使用 best_params 进行聚类 一站式 DBSCAN 函数 查看笔记 二、DenStream DenStream 适合不知道具体的聚类数，且需要实时获取聚类标签的情况。&#xA;DenStream 算法介绍 DenStream 的简单示例 DenStream 的可选参数 验证：推理结果是否随时间变化 DBSCAN 与 DenStream 效果对比 使用 DBSCAN 优化过的 epsilon 参数 查看笔记 三、CluStream CluStream 是一种需要明确指定聚类数的算法。它在一段时间内的聚类效果不错，也就是说，如果你的需求是有时间间隔的，比如每 10 分钟获取一次聚类结果，CluStream 的效果是可以接受的。</description>
    </item>
    <item>
      <title>频繁模式挖掘</title>
      <link>https://luochang212.github.io/posts/frequent_pattern_mining/</link>
      <pubDate>Thu, 05 Sep 2024 00:00:00 +0000</pubDate>
      <guid>https://luochang212.github.io/posts/frequent_pattern_mining/</guid>
      <description> 挖掘 频繁项集 和 频繁序列 是频繁模式挖掘的两个经典任务。它俩的区别是：前者是顺序无关的，而后者关注顺序。对于这两种任务，Spark 已经有非常成熟的解决方案了，在当前主流公司的数据量级下是够用的。&#xA;GitHub 项目地址：frequent-pattern-mining&#xA;频繁项集 经常被念叨的一个用途，是挖掘经常被一起购买的商品（比如奶粉和尿布）。如果知道哪些商品经常被一起购买，就可以将这些商品打包出售。或者放在超市里相隔较远的两个地方，引导用户多逛。&#xA;频繁序列 也很有用。用户的连续行为可以看作一个序列。通过分析用户的频繁序列，产品经理可以发现用户习惯，进而优化功能排布和页面顺序，达到提升链路转化效率的效果。&#xA;✨ 注意：运行以下代码依赖 utils.py 文件。&#xA;一、频繁项集算法：FPGrowth 数据预处理 频繁项挖掘 频繁项集 关联规则 查看示例 二、频繁序列算法：PrefixSpan 一个简单的例子 子序列挖掘 商品编码 生成商品序列 计算频繁子序列 通过子序列回溯原始数据 查看示例 参考：&#xA;Frequent Pattern Mining Market Basket Analysis with Apriori Algorithm × </description>
    </item>
    <item>
      <title>SynchroTrap 算法实现</title>
      <link>https://luochang212.github.io/posts/synchrotrap/</link>
      <pubDate>Sat, 27 Jul 2024 00:00:00 +0000</pubDate>
      <guid>https://luochang212.github.io/posts/synchrotrap/</guid>
      <description>SynchroTrap 是基于 Jaccard 相似度和最大连通子图的异常检测算法，出自 Facebook 的论文 Uncovering Large Groups of Active Malicious Accounts in Online Social Networks.&#xA;GitHub 项目地址：SynchroTrap&#xA;本文做了什么：&#xA;用 mimesis 生成源数据，并基于源数据构造正态分布的样本 通过构造一个 $\lambda$ 可调的泊松过程，生成用户到访时间戳 提供一个由 7 个变量控制的异常数据生成函数，见 gen_attack_df 用 Jaccard 相似度构图，再用 NetworkX 对图做可视化 用 Spark 的 graphframes 计算最大连通子图 复现了论文 2.2 节的可视化效果，见 评估与可视化 介绍如何使用 Docker 构建 Spark 开发环境 ✨ 注意：运行以下代码依赖 utils.py 文件和 gen_data 库。&#xA;一、样本生成 脱离互联网企业，我们很难拿到可供挖掘的异常数据样本。一种方法是自己生成。自己生成样本的好处是能拿到真正的 ground truth，而且可以精细地控制异常的规模和程度。&#xA;生成源数据 生成大盘数据 生成正态样本分布 生成 uid 并计算访问次数 时间与时间戳 用户日志表 生成异常数据 选择攻击开始时间 获取 ip 池 发起攻击 整合两份数据 Note: 与异常捕获的难度有关的变量：</description>
    </item>
    <item>
      <title>图算法笔记</title>
      <link>https://luochang212.github.io/posts/graph_algorithms/</link>
      <pubDate>Sun, 25 Feb 2024 00:00:00 +0000</pubDate>
      <guid>https://luochang212.github.io/posts/graph_algorithms/</guid>
      <description>记笔记能让脑子里的知识结构化说是&#xA;GitHub 项目地址：graph-algorithm&#xA;一、图的基础操作 1.创建图 1.1 从空图开始创建 1.2 用边文件创建 1.3 用已经存在的图、边的列表创建 1.4 创建带权边 1.5 为图添加属性 1.6 创建有向图 2.可视化 random circular spectral shell 3.中心性度量 Degree Centrality Closeness Centrality Betweenness Centrality Eigenvector Centrality 4.随机图生成 5.读写文件 写入文件 读出数据 查看示例 二、通用图算法 连通性 Connectivity 最短路 Shortest Paths 相似性度量 Similarity Measures 距离度量 Distance Measures 链接预测 Link Prediction 匹配 Matching 查看示例 三、社区检测算法 1.常见社区检测算法 1.1 label Propagation 1.2 Girvan-Newman 1.3 Greedy Modularity 1.4 Louvain 2.是否接受边权作为输入 推荐使用 louvain 查看示例 四、图嵌入 施工中</description>
    </item>
    <item>
      <title>算法集萃</title>
      <link>https://luochang212.github.io/posts/algorithms/</link>
      <pubDate>Fri, 03 Apr 2020 00:00:00 +0000</pubDate>
      <guid>https://luochang212.github.io/posts/algorithms/</guid>
      <description> 算法学习笔记，长期更新 GitHub 项目地址：python-tips/algorithms&#xA;排序 本节介绍各种排序算法的思路和特点，并提供了示例代码。&#xA;插入排序 直接插入排序 希尔排序 交换排序 冒泡排序 快速排序 选择排序 简单选择排序 堆排序 归并排序 二路归并排序 查看示例 排列组合 排列 组合 子集 查看示例 深度优先搜索DFS 施工中&#xA;广度优先搜索BFS 施工中&#xA;二叉搜索树 施工中&#xA;动态规划 施工中&#xA;× </description>
    </item>
  </channel>
</rss>
