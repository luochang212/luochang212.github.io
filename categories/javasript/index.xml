<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>JavaSript on Chang Luo</title>
    <link>http://luochang212.github.io/categories/javasript/</link>
    <description>Recent content in JavaSript on Chang Luo</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 24 May 2019 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="http://luochang212.github.io/categories/javasript/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>JavaScript初探 - 表格生成小工具</title>
      <link>http://luochang212.github.io/posts/to_do_list/</link>
      <pubDate>Fri, 24 May 2019 00:00:00 +0000</pubDate>
      
      <guid>http://luochang212.github.io/posts/to_do_list/</guid>
      <description>项目链接：计划表生成工具
JavaScript，名字里带着Java，却和Java没有一毛钱关系。身为一个JavaScript新手，我并不适应JavaScript编程。它不支持，诸如类和继承，这样在Java中常见的概念和操作。同时，它的变量声明似乎也不如Python好用。var和let在python的self面前，立马相形见绌。
但新手的问题，在于由陌生产生隔阂。很容易因为固有的编程习惯，而忽视新语言的特性。哪怕对JS不太感冒，但我依旧深知它的强大。尤其是在可视化这一方面，在玩qtwebengine的时候就已经感受过一次了。目前，我JS的学习平台是W3Schools，中英文网站双管齐下。对这个网站我非常好评，入门的话不需要换平台，就它一家足矣。
其实我学JS不到一周，所涉甚浅，不过为了记录心得和思考过程，所以开了此文。
初衷 我的初衷并不是制作一个表格生成工具。原本我是想做一个统计习惯的工具，来分析自己把一些长期计划坚持下来的能力。但我认为要部署这样一个工具，需要一个动态网页才能办到，而目前我只有一个GitHub page。下面是分析过程。
做一个习惯统计工具，
 需要用户能够注册。声明我是谁，并把我和我的数据绑定。 需要将数据存成文件，而不是像现在一样直接从缓存里下载。 需要按时间戳对生成的数据进行统计。哪天没打卡，哪天打卡了，哪天打卡了但没完成任务，后台必须清楚。 需要对最终结果制作统计图表，这个JavaScript倒是没问题。  以上。
通过分析，我们拆分了实现此工具的步骤。对于一个静态网页，难度主要在第一和第二步上。尤其是对GitHub托管的静态网页而言，不通过git是没法修改仓库里的数据的。对于俺们新手，这个技术成本过高，还是留待将来拥有动态网页以后，再做尝试。如今退而求其次，我打算先做一个单一的表格，来记录当天计划的完成情况。
需求分析 我已经习惯了在写一个project之前，进行需求分析和步骤拆分，这有利于理清编程思路。
制作这么一个计划表生成工具，有哪些需求呢？下面一一列举：
 一个UI界面（前端） 一个允许用户做输入、选择和修改操作的数据流（后端） 一个最终显示的表格（前端） 判断此工具是否easy to use，找到不好用的因素并改进 （测试）  此时我们的big picture就已经明确。战略定了，下面来定战术。
步骤分析 （一）添加计划
对于前端UI，首先我们需要一个textarea，用来接收每项计划的内容。其次需要一个按钮，将该计划添加进计划列表。我把每项计划存成“计划类”下的一个对象。
这个类的声明如下：
var Items = { name: &amp;quot;&amp;quot;, isCheck: &amp;quot;false&amp;quot;, isDelete: &amp;quot;false&amp;quot; };  每次添加计划，我们都要实例化该类下的一个对象：
var item = Object.create(Items);  实例化的对象(item)有三个值，它们分别表示该对象的名称，是否完成，以及是否删除。
（二）生成表格
这是最考验技巧的一步，因为这一步需要接收checkbox和button的值，并且将它们和对应计划(item)绑定。我们现在有n个计划(item)，那么也就有n个checkbox和button.
要知道，用for loop遍历subArray的过程，就是生成表格内容的过程。所以，checkbox和button也都是在这个过程中生成的。那么，我们就可以在它们的生成过程中，将它们的id和对应的计划绑定。为了便于处理，我把id和for loop中的循环数 i 绑定了。因为 i 是从0开始的，这就意味着，它和函数subArray()自变量的值一一对应且相同。
for (i = 0; i &amp;lt; subArray.length; i++) { var index = i+1; body += &#39;&amp;lt;tr&amp;gt;&#39;; body += &#39;&amp;lt;td&amp;gt;&#39; + index.</description>
    </item>
    
  </channel>
</rss>