<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>FrontEnd on Chang Luo</title>
    <link>https://luochang212.github.io/categories/frontend/</link>
    <description>Recent content in FrontEnd on Chang Luo</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 07 Oct 2019 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://luochang212.github.io/categories/frontend/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Monaco Editor 入门指南</title>
      <link>https://luochang212.github.io/posts/monaco_editor_tutorial/</link>
      <pubDate>Mon, 07 Oct 2019 00:00:00 +0000</pubDate>
      <guid>https://luochang212.github.io/posts/monaco_editor_tutorial/</guid>
      <description>⚠️ 注意：本教程已过时。本教程的正确食用方法是从 GitHub monaco-editor-demos 上直接下载代码，然后点击 index.html 直接查看 Demo 及 源码。本文中描述的构建方法可能已不适用（更新于 2024.04）&#xA;GitHub项目链接：monaco-editor-demos&#xA;在学习 Monaco Editor 的过程中，我发现网络上的中文教程很少。为了填补这部分空白，我决定写一份入门教程，帮助初学者快速熟悉 Monaco Editor。通过阅读本文，你可以了解以下内容：&#xA;如何安装 如何搭建 如何调用常用 API 如何寻找学习资源 安装 新建项目文件夹，打开它：&#xA;$ mkdir my-application $ cd my-application 确保你已经下载了 npm，然后安装 Monaco Editor：&#xA;$ npm install monaco-editor 搭建 本文提供了搭建 Monaco Editor 的一种方法，此方法的特点是能够兼容文件系统。如果你希望为后续应用添加文件管理系统，那么参考本文的搭建流程可以避免不必要的踩坑。添加文件系统的具体方法参见 monaco-speech-editor。&#xA;有两种搭建方式可选：&#xA;方式一：直接从GitHub仓库下载。&#xA;方式二：手动搭建。&#xA;下面介绍了手动搭建的流程。&#xA;首先，在项目文件夹 my-application 下，新建一个名为 base 的文件夹。然后在该文件夹下新建 index.html, app.js, style.css:&#xA;$ mkdir base $ cd base $ touch index.html app.js style.css 在本地编辑器打开 index.</description>
    </item>
    <item>
      <title>【项目】摩纳哥语音编辑器</title>
      <link>https://luochang212.github.io/posts/monaco_speech_editor/</link>
      <pubDate>Thu, 22 Aug 2019 00:00:00 +0000</pubDate>
      <guid>https://luochang212.github.io/posts/monaco_speech_editor/</guid>
      <description>摩纳哥语音编辑器（Monaco Speech Editor）是一款适用于视障人群的在线代码编辑器。它在开源编辑器 Monaco Editor 的基础上，开发了专为视障者设计的语音辅助功能，包括鼠标悬浮提示，快捷键操作和代码阅读。&#xA;其代码阅读功能尤其强大，用户可以用键盘精确定位指定内容进行阅读。针对同一段代码，它提供多种语音输出模式：字符模式、代码模式、音乐模式、全局模式。这些模式根据用户在不同编程阶段的不同需求，提供差异化的语音输出。比如，当用户对一个语句进行 debug 时，推荐使用字符模式进行语音播放。&#xA;如果你对它的功能感兴趣，点击下方链接尝试一下吧 GitHub 项目地址：monaco-speech-editor&#xA;项目背景 根据世界卫生组织2010年的数据，全盲者在全年龄段人口中所占比例为0.58%。在全盲人口中，大部分是中老年人口。从下图可以看出，致盲风险随着年龄快速升高。在0～14岁人群中，全盲比例仅有0.07%；在15～49岁人群中，全盲比例稍高一些，为0.16%；而在50岁以上人群中，全盲比例则达到了2.39%。&#xA;全盲人口的比例不大，但从绝对数值来看却是非常可观的。2010年，世界全盲人口比例为0.58%，但全盲人口数却达到了3936.5万。即使14岁以下人口的全盲比例仅有0.07%，但考虑绝对数值，也达到了142.1万人。&#xA;而且并非只有全盲者才需要语音辅助。有相当比例的视力障碍者，即使使用眼镜，也无法矫正到正常视力。这部分的视障者，也是需要语音辅助的。相比于全盲者，视力障碍者的人口则更为庞大，达到了惊人的2亿8538万。&#xA;在提倡公平的原则下，我们希望视障者和视力正常的人一样，也能自由地选择职业。事实上现在已经有[部分视障工程师](http://www.xinhuanet.com/2018-01/04/c_1122206710.htm)，出现在程序员岗位上，证明着他们的实力。本项目旨在为视障程序员编程无障碍化做一些贡献，[项目源代码](https://github.com/luochang212/monaco-speech-editor)现已在GitHub上以MIT许可证开源。 技术选择 本编辑器是用JavaScript编写的网络应用 (web application)。它只有两项功能需要外部依赖，一个是在线代码编辑器模块，一个是文字转语音模块。&#xA;（一）在线代码编辑器&#xA;开源的在线代码编辑器还是挺多的，比如：&#xA;Ace CodeMirror Monaco Editor 它们对语法高亮、缩进、代码补全等基础功能都有比较好的支持，用起来大同小异。选择Monaco Editor是因为用惯了VSCode。毕竟Monaco Editor的源代码就是直接从VSCode贴过去的，两者的界面风格和操作方式都极其相似，对VSCode用户比较友好。但后来使用过程中发现打脸了，当然这是后话。&#xA;（二）文字转语音&#xA;文字转语音 (text to speech) 的应用就更多了，几乎各大公司都推出了自己的应用：&#xA;Amazon Polly Cloud Text-to-Speech Microsoft text to speech API 但鉴于这些应用都需要网络连接，才能获取语音。考虑到网络延迟和脱机使用的问题，本项目并未采用以上任何一种API，而是选择了Web Speech API。Web Speech API本身并不提供语音服务，它事实上起到资源连接的作用。它首先会搜索操作系统，然后将操作系统提供的语音支持集合成一个列表，提供给浏览器使用。所以Web Speech API提供的语音支持会随用户系统的语音支持项而发生变化。因此不排除一些较老的机型无法使用的可能。但本项目认为本地化语音支持比之于对老机型的支持更加重要，因此选择了Web Speech API。这也是一个取向问题。&#xA;综上，本项目主要依赖项只有两个：Monaco Editor 和 Web Speech API。事实上，本项目的名称 Monaco Speech Editor，也正是取自这两个依赖项。&#xA;需求分析 一名视障程序员或一位全盲者，在使用代码编辑器时，主要有以下信息需求：&#xA;界面内容信息：这个按钮的名称是什么？这项设置的名称是什么？ 界面定位信息：编译器在哪？设置在哪？某项功能的按钮在哪？ 界面反馈信息：我刚刚按下的按钮打开了什么功能？ 编辑器内容信息：这行代码的内容是什么？光标前的字符是什么？ 编辑器定位信息：某个的变量在哪儿？我应该如何跳转到那儿？ 编辑器反馈信息：我刚刚输入了什么字符？我将要删除什么字符？ 光标位置信息：全文一共有多少行代码？我的光标现在停在第几行？ 控制台内容信息：控制台的输出是什么？ 功能设计 本项目提供的功能大致可划分为三个类：编辑器的基础功能，语音支持和UI交互辅助。</description>
    </item>
    <item>
      <title>JavaScript 初探</title>
      <link>https://luochang212.github.io/posts/to_do_list/</link>
      <pubDate>Fri, 24 May 2019 00:00:00 +0000</pubDate>
      <guid>https://luochang212.github.io/posts/to_do_list/</guid>
      <description>初次学习JavaScript，用JS写了一个计划表生成工具。&#xA;项目链接：计划表生成工具&#xA;JavaScript是一个神奇的语言。它既不像Java原生地支持类和继承，也不如Python声明变量方便，更兼闹出&amp;quot;===&amp;ldquo;这样的麻烦。但我依旧深知它的强大，尤其是在可视化这一方面，在接触qtwebengine的时候已经感受过一次了。目前，我学习JS的平台是W3Schools 和廖雪峰的网站。&#xA;话说这是我自学JS以来写的第一个程序，求轻虐(￣▽￣)&#xA;我的初衷 我的初衷是制作一个习惯统计工具，用来分析我在长期计划上的坚持能力。于是照例我对它做了一个需求分析。&#xA;习惯统计工具的需求分析：&#xA;需要用户能够注册。即能够声明我是谁，并且把我和我的数据绑定。 需要将数据存在文件里，而不是存在缓存文件里。 需要按时间戳对生成的数据进行统计。 需要对最终结果制作统计图表。 通过分析，我发现静态网页很难实现第一第二步。能不能实现我不敢下定论，但肯定有技术难度。目前，我只有一个由GitHub page托管的静态网页，因此我选择退而求其次。先学习生成一个单一的表格，来记录当天计划的执行情况。我把这个工具叫做计划表生成工具。&#xA;需求分析 计划表生成工具好比是习惯统计工具的一个子系统。习惯统计工具面向的是连续多天，而计划表生成工具只面向单独一天。&#xA;计划表生成工具的需求分析：&#xA;一个UI界面（前端） 一个允许用户做输入、选择和修改操作的数据流（后端） 一个最终显示的表格（前端） 判断此工具是否easy to use，找到不好用的因素并改进 （测试） 此时我们的big picture就已经明确。战略定了，下面来定战术。&#xA;步骤分析 （一）添加计划&#xA;对于前端UI，首先我们需要一个textarea，用来接收每项计划的内容。还需要一个按钮，点下这个按钮时，将文本框内的信息添加到计划列表。为了便于存储，我为计划(item)设计了一个类。&#xA;这个类的声明如下：&#xA;var Items = { name: &amp;#34;&amp;#34;, isCheck: &amp;#34;false&amp;#34;, isDelete: &amp;#34;false&amp;#34; }; 可以看出这个类有三个值。它们分别表示该对象的名称，是否完成，以及是否删除。每次添加计划，用以下代码实例化这个类(items)，生成一个对象(item)：&#xA;var item = Object.create(Items); （二）生成表格&#xA;这一步要把复选框(checkbox)和按钮(button)都和每一行的计划绑定。那么如何绑定呢？&#xA;要知道，用for loop遍历subArray的过程，就是生成表格内容的过程。所以，checkbox和button也都是在这次遍历中生成的。那么，我们就可以在它们的生成过程中，创建它们的id，并把id和计划对应起来。&#xA;具体到代码中，我用了i.toString(10)将循环数转成string类型，然后加到id上。于是，第一项计划对应的checkbox的id就是&amp;quot;cb0&amp;rdquo;, 对应的button的id就是&amp;quot;btn0&amp;quot;, 以此类推。&#xA;for (i = 0; i &amp;lt; subArray.length; i++) { var index = i+1; body += &amp;#39;&amp;lt;tr&amp;gt;&amp;#39;; body += &amp;#39;&amp;lt;td&amp;gt;&amp;#39; + index.</description>
    </item>
  </channel>
</rss>
