<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Nohup on Chang Luo</title>
    <link>https://luochang212.github.io/tags/nohup/</link>
    <description>Recent content in Nohup on Chang Luo</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 30 May 2024 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://luochang212.github.io/tags/nohup/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>后台管理工具</title>
      <link>https://luochang212.github.io/posts/process_manager/</link>
      <pubDate>Thu, 30 May 2024 00:00:00 +0000</pubDate>
      <guid>https://luochang212.github.io/posts/process_manager/</guid>
      <description>简单的 nohup [CMD] &amp;amp; 已经不够用，该研究一下后台管理工具了&#xA;问了一下 Qwen，大概有五款工具可用。这五款工具可以分两类：&#xA;进程管理器：pm2, systemd, supervisor 终端复用器：screen, tmux 总之，保持单个程序在后台运行，systemd 就够用了。如果需要保持多个程序，建议用 pm2。screen 和 tmux 则是更临时的方案，适合偶尔开起来用一下的情况。&#xA;一、systemd 使用 systemd 管理 Jupyter lab 服务，必须先创建一个 systemd unit 文件来定义服务的启动、重启等行为。以下是创建 systemd 服务的步骤。&#xA;1.1 创建 unit 文件 用 vi 新建并打开 jupyterlab.service 文件：&#xA;sudo vi /etc/systemd/system/jupyterlab.service 配置如下：&#xA;[Unit] Description=Jupyter Lab After=network.target [Service] Type=simple User=[YOUR_USERNAME] ExecStart=/home/[YOUR_USERNAME]/miniconda3/bin/jupyter lab --ip=0.0.0.0 --port=443 --no-browser --allow-root WorkingDirectory=/home/[YOUR_USERNAME]/ Restart=on-failure RestartSec=8s [Install] WantedBy=multi-user.target 将 [YOUR_USERNAME] 替换为你的用户名。如果你在 root 上开服务，记得在 ExecStart 后加一个 --allow-root 如果你的服务不在 https 上，请用 --port=80 或 --port=8888 之类的其他端口 在 https 上搭建 jupyter lab 服务的方法，参见 在服务器上使用 JupyterLab 1.</description>
    </item>
  </channel>
</rss>
