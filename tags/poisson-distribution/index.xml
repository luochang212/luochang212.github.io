<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Poisson-Distribution on Chang Luo</title>
    <link>https://luochang212.github.io/tags/poisson-distribution/</link>
    <description>Recent content in Poisson-Distribution on Chang Luo</description>
    <generator>Hugo</generator>
    <language>zh-cn</language>
    <lastBuildDate>Sat, 19 Sep 2020 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://luochang212.github.io/tags/poisson-distribution/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>泊松分布的仿真及可视化</title>
      <link>https://luochang212.github.io/posts/poisson/</link>
      <pubDate>Sat, 19 Sep 2020 00:00:00 +0000</pubDate>
      <guid>https://luochang212.github.io/posts/poisson/</guid>
      <description>&lt;blockquote&gt;&#xA;&lt;p&gt;本文介绍泊松分布和泊松函数的定义，并通过 Python random 库对泊松分布进行仿真，带你触摸复杂表象下的简单本质。&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;p&gt;GitHub 项目地址：&lt;a href=&#34;https://github.com/luochang212/python-tips/blob/master/poisson/poisson.py&#34; target=&#34;_blank&#34;&gt;python-tips/poisson&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h3 id=&#34;1-从泊松函数讲起&#34;&gt;1. 从泊松函数讲起&lt;/h3&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Poisson_distribution&#34;&gt;泊松分布&lt;/a&gt; 表示在&lt;strong&gt;给定时间段&lt;/strong&gt;内发生&lt;strong&gt;给定数量的事件&lt;/strong&gt;的概率。这个定义比较抽象。举个具体的例子，假设你每小时接到电话的概率是固定的，比如每小时 0.05 个，那么你在接下来 1 小时内接到电话个数的概率，就服从泊松分布:&lt;/p&gt;&#xA;&lt;p&gt;1 小时内接到 0 个电话，对应一个概率值 &lt;code&gt;$P_0$&lt;/code&gt;；&lt;/p&gt;&#xA;&lt;p&gt;1 小时内接到 1 个电话，对应一个概率值 &lt;code&gt;$P_1$&lt;/code&gt;；&lt;/p&gt;&#xA;&lt;p&gt;&amp;hellip; &amp;hellip;&lt;/p&gt;&#xA;&lt;p&gt;1 小时内接到 n 个电话，也对应一个概率值&lt;code&gt;$P_n$&lt;/code&gt;。&lt;/p&gt;&#xA;&lt;p&gt;这些概率值组成一个概率分布列，它们的值  &lt;code&gt;$(n, P_n)$&lt;/code&gt;  在二维坐标下连成一条&lt;strong&gt;曲线&lt;/strong&gt;。这条曲线所在的函数就是&lt;strong&gt;泊松分布的概率密度函数&lt;/strong&gt;。其公式及图像如下：&lt;/p&gt;&#xA;&lt;p&gt;&lt;code&gt;$$\boxed{P(k | t, \lambda)=\frac{(\lambda t)^{k}}{k !} \exp (-\lambda t)}$$&lt;/code&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://luochang212.github.io/img/The-Poisson-distribution.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;从公式中，我们可以看出：只要确定了 &lt;code&gt;$\lambda$&lt;/code&gt; 和 &lt;code&gt;$t$&lt;/code&gt;，该式就退化成了概率 &lt;code&gt;$P$&lt;/code&gt; 关于事件发生次数 &lt;code&gt;$k$&lt;/code&gt; 的函数。 类似地，如果我们确定了 &lt;code&gt;$\lambda$&lt;/code&gt; 和 &lt;code&gt;$k$&lt;/code&gt;，则该式退化成概率&lt;code&gt;$P$&lt;/code&gt; 关于时间范围 &lt;code&gt;$t$&lt;/code&gt; 的函数。&lt;/p&gt;&#xA;&lt;p&gt;“确定哪些参数，让函数最终退化成哪些参数的函数”，这个选择和我们的研究目的有关。如果你对不同 &lt;code&gt;$k$&lt;/code&gt; 如何影响 &lt;code&gt;$P$&lt;/code&gt; 值感兴趣，那么就应该确定参数 &lt;code&gt;$\lambda$&lt;/code&gt; 和 &lt;code&gt;$t$&lt;/code&gt;。如果对 &lt;code&gt;$t$&lt;/code&gt; 和 &lt;code&gt;$P$&lt;/code&gt; 之间的关系感兴趣，那么就应该确定参数 &lt;code&gt;$\lambda$&lt;/code&gt; 和 &lt;code&gt;$k$&lt;/code&gt;。&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
