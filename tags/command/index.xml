<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Command on Chang Luo</title>
    <link>https://luochang212.github.io/tags/command/</link>
    <description>Recent content in Command on Chang Luo</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 20 Nov 2024 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://luochang212.github.io/tags/command/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Docker 命令速查</title>
      <link>https://luochang212.github.io/posts/docker_command/</link>
      <pubDate>Wed, 20 Nov 2024 00:00:00 +0000</pubDate>
      <guid>https://luochang212.github.io/posts/docker_command/</guid>
      <description>在低版本服务器运行高版本环境，使用 Docker 是一个好办法。&#xA;GitHub 项目地址：docker-command&#xA;一、什么是 Docker Docker 是一种容器技术。它通过轻量级的虚拟化，将程序及其依赖打包到一个称为 容器 的独立运行环境中，从而保证应用在不同环境中的一致性。&#xA;容器与虚拟机功能类似，但更加轻量化，这是因为容器提供操作系统级别的虚拟化，而虚拟机则是硬件级别的虚拟化。不同于虚拟机需要为每个实例运行一个完整的操作系统，容器共享操作系统内核，因此更轻量、更高效。不过，轻量化的设计也带来了一些限制，例如 systemctl 等服务管理工具通常在容器中不可用。&#xA;1.1 核心组件 要上手 Docker，首先要认识两大核心组件：&#xA;镜像 (Image): 镜像拥有运行应用所需的一切，包括操作系统、环境变量、代码、依赖包等等 容器 (Container): 容器可由镜像创建，每个容器拥有独立的运行环境 镜像是无法直接运行的，需要由镜像创建对应的容器才能运行。可以认为容器是镜像的实例。镜像负责存储和分发，容器负责部署并提供服务。&#xA;1.2 主要用途 很多场景能用上 Docker：&#xA;轻量级虚拟化：可以当作虚拟机使用 保证环境一致：确保开发、测试和生产环境的一致性 支持微服务架构：让每个服务运行在独立的容器中，易于扩展和管理 支持 CI/CD 流水线：打包依赖及应用时，一次构建即可在任何环境中运行 如果你还不了解 Docker，请访问以下资源：&#xA;官网：https://www.docker.com/ 入门文档：https://docs.docker.com/guides/ 二、常用命令 2.1 基础操作 命令 描述 docker info 查看 docker 系统信息 docker version 查看 docker 版本信息 docker --version 查看 docker 简略版本信息 docker login 登录 DockerHub docker login nvcr.io 登录 nvcr.io 2.2 镜像管理 命令 描述 docker images 查看镜像 docker pull [IMAGE] 拉取镜像 docker rmi [IMAGE] 删除镜像 docker commit [CONTAINER] [IMAGE]:[TAG] 将容器保存为新的镜像 docker save -o myimage.</description>
    </item>
  </channel>
</rss>
