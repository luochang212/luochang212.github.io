<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>FastAPI on Chang Luo</title>
    <link>https://luochang212.github.io/tags/fastapi/</link>
    <description>Recent content in FastAPI on Chang Luo</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 13 Apr 2024 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://luochang212.github.io/tags/fastapi/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>LightGBM 工程实践</title>
      <link>https://luochang212.github.io/posts/lightgbm_practice/</link>
      <pubDate>Sat, 13 Apr 2024 00:00:00 +0000</pubDate>
      <guid>https://luochang212.github.io/posts/lightgbm_practice/</guid>
      <description>LightGBM 是一种梯度提升树算法，可用于排序、分类和回归任务。本文由一系列 Jupyter Notebook 串成，介绍如何使用 LightGBM 训练二分类模型。本项目使用的数据集是 adult (・ω&amp;lt; )★&#xA;GitHub 项目地址：lightgbm-binary&#xA;🚀 本文的亮点 ✅ 使用 Optuna 做超参数寻优 ✅ 使用 Treelite 做推理加速 ✅ 使用 Graphviz 做决策树模型可视化 ✅ 使用 scale_pos_weight 参数，解决样本不均衡问题 ✅ 使用自编写的自适应学习率衰减技术提高 AUC，详见 util.AdaptiveLearningRate ✅ 对由标签概率生成标签的阈值寻优 (y_pred -&amp;gt; y)，详见 util.gen_threshold ✅ 一站式评估函数，可一次性输出多种指标，包括 accuracy, precision, recall, f1_score, auc, cross-entropy loss, confusion matrix，详见 util.eval_binary ✨ 感谢 Kimi 在学习过程中提供的无私帮助～&#xA;一、数据可视化 导入数据 统计描述 describe() 方法 info() 方法 统计各字段枚举值数量 查看字段下所有枚举值 查看空值个数 可视化 标号的值的比例 小提琴图 (Violin Plot) 查看示例 二、预处理与特征选择 预处理 标签编码 更好的编码方式？ 初次训练 使用 lgb.</description>
    </item>
    <item>
      <title>FastAPI 初见</title>
      <link>https://luochang212.github.io/posts/fastapi/</link>
      <pubDate>Sat, 21 Nov 2020 00:00:00 +0000</pubDate>
      <guid>https://luochang212.github.io/posts/fastapi/</guid>
      <description>什么是 API？如何从零开始，搭建自己的第一个API？本文带你搭建一个 API 小应用以了解 FastAPI 的使用细节&#xA;GitHub 项目地址：calendar-api&#xA;什么是 API？&#xA;简单来说，API 是软件间相互传输数据的接口。它在生活中十分常见，比如博物馆订票系统中就使用了 API. 当你在手机应用上订票时，手机实际上发送了一个 HTTP 请求给远程服务器。远程服务器解析该请求。当确认所有字段信息均准确无误后，它才会把你的订票信息录入数据库，并回调成功标识。只有当上述操作全都被正确执行时，你的手机才会显示订票成功。&#xA;API 程序通常运行在服务端 (server) 上。客户端 (client) 通过向 API 提供的网络接口发送请求，以实现对服务端的通信。服务端收到请求后，对请求进行解析。如果请求是合法的，则执行该请求，并将请求结果回调给客户端。一次典型的 API 请求大体上是这么个过程。&#xA;在业务中，有时需要记录每次请求产生的中间状态、运行结果和日志数据。这时就需要 服务端 调用 数据库 (database) 以存储业务中产生的各种信息。&#xA;1. REST API API 本身是高度个性化的，软件间可以用任意数据类型进行通信。但如果 API 缺少规范、各行其是，就会导致软件间沟通成本高企。REST API 就是其中一种规范。REST API 提出了六项指导原则，只要 API 符合这六项指导原则，就可称之为“符合 REST 风格的 API”。&#xA;REST API 提出的六项指导原则分别是：&#xA;Client–server Stateless Cacheable Uniform interface Layered system Code on demand (optional) [了解更多]&#xA;FastAPI 对构建 REST 风格的 API 提供了良好的支持。</description>
    </item>
  </channel>
</rss>
