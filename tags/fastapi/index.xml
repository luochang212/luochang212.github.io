<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>FastAPI on Chang Luo</title>
    <link>http://luochang212.github.io/tags/fastapi/</link>
    <description>Recent content in FastAPI on Chang Luo</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 21 Nov 2020 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="http://luochang212.github.io/tags/fastapi/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>FastAPI 初见</title>
      <link>http://luochang212.github.io/posts/fastapi/</link>
      <pubDate>Sat, 21 Nov 2020 00:00:00 +0000</pubDate>
      
      <guid>http://luochang212.github.io/posts/fastapi/</guid>
      <description>从零开始，用 FastAPI 构建一个日程 API.
 GitHub项目地址：calendar-api
API (application programming interface, 应用编程接口) 是软件间交流信息的接口。通常来说，API 服务架设在一台机器 (server) 上，另一台机器 (client) 通过其网络接口进行访问。此外，server 可以跟远程数据库 (database) 连接，以存储请求过程中产生的数据。
如图，可以看出是一个三方游戏。服务端被动地接受客户端发来的请求。如果请求通过校验且被正确执行，运行结果将被更新进数据库，然后回调给用户；如果请求未通过校验或执行不正确，则将错误信息回调给用户，以告知服务未能正确执行。
在某些情况下可能无需数据库，比如客户端要求返回 x + y 等于几，这样就由三方退化为两方。
1. REST API API 本身是高度定制化的，软件间可以用任意数据类型进行通信。但如果 API 是面向大众的，定制化将导致软件间沟通成本高企。这就需要有规范来约束其沟通方式。REST API 就是其中一种规范。REST API 提出了六项指导原则，只要 API 符合这六项指导原则，就能称之为“符合 REST 风格的 API”。
 REST API 提出的六项指导原则分别是：
 Client–server Stateless Cacheable Uniform interface Layered system Code on demand (optional)  [了解更多]
 PS: FastAPI 对构建 REST 风格的 API 提供良好的支持，这也是本文选用 FastAPI 的原因之一。</description>
    </item>
    
  </channel>
</rss>