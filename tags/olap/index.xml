<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>OLAP on Chang Luo</title>
    <link>https://luochang212.github.io/tags/olap/</link>
    <description>Recent content in OLAP on Chang Luo</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 26 Jul 2025 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://luochang212.github.io/tags/olap/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>耶是 ClickHouse！我们有救了！！</title>
      <link>https://luochang212.github.io/posts/chat_to_clickhouse/</link>
      <pubDate>Sat, 26 Jul 2025 00:00:00 +0000</pubDate>
      <guid>https://luochang212.github.io/posts/chat_to_clickhouse/</guid>
      <description>本来我懒得装，但是 MySQL 太慢了，遭不住，咱还是把 ClickHouse 装起来吧。&#xA;GitHub 项目地址：chat-to-clickhouse&#xA;在此前的文章《Agent 实战：智能路由、任务拆解和链路工程》中，实现了一个 ChatBI，它能访问 MySQL 数据库。可是对于千万量级的数据，一次复杂查询需要消耗数秒甚至数十秒。并且 Agent 的 NL2SQL 尚未做到 one-shot，它需要不断试错，这进一步加剧了查询效率的问题。&#xA;如何解决查询效率低下的问题呢？这便引入今天的主角：ClickHouse。&#xA;一、分析利器 ClickHouse 是 Yandex 旗下的一款开源的列式存储数据库，专为 联机分析处理 (OLAP) 场景设计。在做数据分析时，它比传统数据库快几倍到几十倍。分析场景的核心需求是「聚合计算」，即 GROUP BY 子句下的 SUM, AVG, COUNT 操作，这些正是 ClickHouse 的强项。&#xA;为什么它的聚合计算如此之快呢？因为它具有如下特性：&#xA;列式存储：顾名思义，列存的数据是按列存储的。这种存储方式可以减少无效 I/O，因为列存可以只读取查询中涉及的列。而非行存那样，读取整行后再丢掉不需要的列 并行计算：列存的另一个优势是数据更容易切分。单列数据的连续性和同构性更强，无需考虑与其他列的关联，因此可以更方便地按维度（如时间区间、数值分段）拆分并分配到不同节点。当然，这种设计的代价是使得插入操作变得更加昂贵 物化视图：物化视图可以把高频分析的结果提前算好存在表里，后续查询直接读结果，无需重新计算 二、安装过程 用 Docker 安装，过程相对简单。工业界在集群上装，比咱们这个复杂不少。&#xA;1. 配置 Docker 镜像源 大陆使用 Docker，免不了配置镜像源。如果你是 Linux 系统 (Ubuntu, CentOS)，Docker 的配置文件在 /etc/docker/daemon.json。如果你是 Windows 或 MacOS 用户，可以在 Docker Desktop 的 Settings -&amp;gt; Docker Engine 里改 daemon.json。</description>
    </item>
  </channel>
</rss>
