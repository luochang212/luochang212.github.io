<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>python on Chang Luo</title>
    <link>http://luochang212.github.io/tags/python/</link>
    <description>Recent content in python on Chang Luo</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 10 May 2019 21:43:09 +0100</lastBuildDate>
    
	<atom:link href="http://luochang212.github.io/tags/python/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>PyQt5 布局浅析之侧边栏</title>
      <link>http://luochang212.github.io/posts/pyqt5_layout_sidebar/</link>
      <pubDate>Fri, 10 May 2019 21:43:09 +0100</pubDate>
      
      <guid>http://luochang212.github.io/posts/pyqt5_layout_sidebar/</guid>
      <description>GitHub项目链接：pyqt5-demo
主流软件如网易云音乐、腾讯电脑管家，都有侧边栏。侧边栏能有效扩展应用空间，让软件功能的层次更加分明。
但PyQt5并没有一个专门的方法实现侧边栏。要实现侧边栏，主要有两种技术路线。一是用标签部件(QTabWidget)改造而来，二是用网格布局(QGridLayout)画出来。本文采用第一种技术路线，制作一个简单的侧边栏应用。
 Note: 两种技术路线制作的侧边栏有细微的差别。如果采用第二种技术路线，侧边栏和内容页之间没有明显的分野。所以需要额外地在侧边栏和内容页之间加一条线，来突出两者属于不同的组件。而第一种技术路线不需要，创建的侧边栏和内容页之间的区别明显。
下图是一个用第二种技术路线(QGridLayout)制作的应用：
 软件分析 在开始写代码之前，我们先分析制作一个侧边栏布局应用至少需要哪些步骤。
 添加部件 设置布局 改造标签部件(QTabWidget) 为按钮编写函数实现页面跳转  添加部件并设置布局 经过上述分析，我们明确了首先要添加部件并为部件设置布局，搭出一个基本框架。关于部件和布局的基础知识，在上一篇博文中有介绍，详见PyQt5 布局浅析。
下面这段代码添加了部件且设置了布局。
from PyQt5.QtWidgets import * import sys class Window(QMainWindow): def __init__(self): super().__init__() # set the title of main window self.setWindowTitle(&#39;Sidebar layout - www.luochang.ink&#39;) # set the size of window self.Width = 800 self.height = int(0.618 * self.Width) self.resize(self.Width, self.height) # add all widgets self.btn_1 = QPushButton(&#39;1&#39;, self) self.btn_2 = QPushButton(&#39;2&#39;, self) self.</description>
    </item>
    
    <item>
      <title>PyQt5 布局浅析</title>
      <link>http://luochang212.github.io/posts/pyqt5_layout/</link>
      <pubDate>Fri, 03 May 2019 00:00:00 +0000</pubDate>
      
      <guid>http://luochang212.github.io/posts/pyqt5_layout/</guid>
      <description>GitHub项目链接：pyqt5-demo
制作一个简单的桌面应用大致可以分为三步，首先添加窗口小部件，其次设置部件布局，最后为部件添加功能。所以，学习PyQt5应该从设置布局开始。
 Note：PyQt5是Python环境下用来开发UI界面的一个包。它容易上手，对初学者友好，并且拥有丰富的函数库，可以实现大部分桌面应用的开发需求，且支持QSS语言，能够对界面风格做个性化调整。总体来说，PyQt5是一款开发效率极高的UI框架。
 创建第一个窗口 一般来说，桌面应用都以窗口(window)形式呈现。因此，要搭建桌面应用，首先要创建窗口。
下面这段代码创建了一个空的窗口。
from PyQt5.QtWidgets import * import sys class Window(QMainWindow): def __init__(self): super().__init__() # set the title of main window self.setWindowTitle(&#39;My first window - www.luochang.ink&#39;) # set the size of window self.Width = 500 self.height = int(0.618 * self.Width) self.resize(self.Width, self.height) if __name__ == &#39;__main__&#39;: app = QApplication(sys.argv) ex = Window() ex.show() sys.exit(app.exec_())  这段代码仅仅设置了窗口的标题和大小。下一步，我们要往这个空的窗口里添加部件(widget). 为了规范性，我们在Window类里新建一个函数initUI, 然后在initUI里为窗口添加部件。
为窗口添加部件 下面这段代码为窗口添加了一个按钮(QPushButton).
from PyQt5.QtWidgets import * import sys class Window(QMainWindow): def __init__(self): super().</description>
    </item>
    
    <item>
      <title>我的微博数据可视化</title>
      <link>http://luochang212.github.io/posts/my_weibo/</link>
      <pubDate>Sat, 20 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>http://luochang212.github.io/posts/my_weibo/</guid>
      <description>GitHub项目链接：weibo-analysis
这次的数据用的是本科期间就已经爬好，丢在硬盘里的数据。但因为raw data里夹杂着大量和博文无关的字符，当时没有足够的编程技巧处理数据，这一丢就是两年。本Python初丁趁着现在还有机会摸鱼，赶紧把数据翻出来，让它们发光发热。
文本获取 因为新浪微博严防死打，现如今微博的数据越来越不好爬。Github上的微博爬虫生存周期通常都很短，使爬取数据的成本大大增加。但是万变不离其宗，最笨的方式常常是最有效的。这里我用的是微博@失眠狸 同学的方法，用鼠标精灵写了个插件，控制快捷键和页面拖动，把内容从浏览器上粘贴到sublime里。
生成csv文件 有了原始数据，接下来我们要把数据归一化，做成方便处理的数据。一个常用的方法就是将数据整理成csv文件。
第一步，先将原始文件按字段进行分割。根据原数据，我划分了五个字段: id, date, time, device, content, 它们分别记录本条微博的文件位置、发布日期、发布时间、发送设备和文本内容。
设计完数据结构之后，我们先用split函数对原数据进行粗略划分，再用find函数进一步定位到精确位置。接着提取各字段内容，再依次存入csv。整理数据的工作就完成啦。
可视化微博数据 有了csv文件，可视化数据就很方便了。此时我从PyCharm平台换到jupyter notebook工作，因为相较于PyCharm, ipynb可以制作的各式各样的可视化图表和窗口小工具(widget), 更适合于数据科学工作。至于工具包，这里我选择了数据分析工具pandas和可视化工具seaborn.
好了，废话少说，让我们进入分析流程。
首先是需求分析，我的目标如下:
 绘制日期分布热力图，观察今年使用微博频率的趋势
 绘制设备使用直方图，看看平时最常用什么平台发博
 绘制时间分布直方图，观察一天之中各时段的发博频率
 调用窗口工具，拖动查看各个时间段都发了什么内容
  过程见github repository, 就不赘述了。
分析结果如下:
热力图总的来说颜色逐年加深，说明我正在逐渐成为一个微博控。而且注意到往年年初我是不怎么玩微博的，但随着年纪渐长，1-3月份我玩微博的频率越来越高，这意味着过年可能越来越无聊，没有年味，从而加长了我混迹微博的时间。
是你吗？华为的舔狗~
晚上2点不睡的坏小孩，早上10点起的偷懒者。（此处是一个卑微的笑容）</description>
    </item>
    
    <item>
      <title>用Jupyter notebook规划旅行路线</title>
      <link>http://luochang212.github.io/posts/tsp_route/</link>
      <pubDate>Wed, 10 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>http://luochang212.github.io/posts/tsp_route/</guid>
      <description>GitHub项目链接：tsp-route
对于在欧洲的小伙伴们，复活节假在这一周就正式开始啦。大家都是怎么计划旅行的呢？
我的习惯是在出发前的最后一个晚上，花上半小时，在网上搜索当地感兴趣的景点 (POI), 然后在Google Maps上为它们点上小星星，以免和它们插肩而过。
每次搜完资料，我的谷歌地图上都攒满了密密麻麻的小星星。此时此刻，望着这些密集的星星，本人的偷懒本能发动了。我不禁发出灵魂之问：如何才能走最少的路，就周游所有景点呢?
找遍了谷歌和百度，都没发现我要路径规划功能。最接近需求还是谷歌的&amp;rdquo;Add destination&amp;rdquo;功能。然而这个功能只是把你点选的地点依次连接在一起罢了。可是次序对我们来说并不重要，只要总路径最短就好了。
没有现成货怎么办，自己写一个呗。
适用模型：TSP 模型 首先把问题抽象化，概括要解决的问题。我们的问题是：求从一个地方出发，遍历所有城市，回到起点的最短路径
这其实对应了一个非常经典的问题，那就是旅行商问题，又名TSP问题。旅行商问题的描述是这样的：一个商人在各个城市之间旅行，要求遍历所有城市并返回到出发点，要如何规划路线，才能使总路径最短。(这里就不过多解释了，更多信息见维基百科)
解决思路  用googlemaps包获取纬度和经度信息 用OR-Tools包求解TSP问题 最后用gmaps可视化结果  敲下来以后不禁感慨，Google Maps的API真的太好用了，到头来根本不需要自己敲多少代码orz
食用指南 项目地址 &amp;ndash;&amp;gt; 传送门
在体验之前，你需要以下配置：
 你需要一个Jupyter notebook, 推荐是直接安Anaconda3. 你还需要安装这些包：googleplaces, googlemaps, gmaps, ortools. 你需要一个Google Maps API key，获取链接: https://developers.google.com/maps/documentation/distance-matrix/start#get-a-key  完成配置等于成功的一半。在Jupyter notebook打开TSPSolver.ipynb，将第一个代码块的所有变量，改成自己的。比如自己的目的地和自己的API密码……最后从头到尾运行所有代码块，你就可以得到自己的旅行地图辣~
配置代码如下。
# input the places of interest (POI) places = &#39;YHA London Central Hostel&#39;, &#39;Coca-Cola London Eye&#39;, &#39;St. Paul\&#39;s Cathedral&#39;, &#39;Leadenhall Market&#39;, &#39;The National Gallery&#39; \ &#39;Big Ben&#39;, &#39;Buckingham Palace&#39;, &#39;Waterloo Station&#39; # the region Location=&#39;London&#39; # choose a mode Mode = &amp;quot;walking&amp;quot; # &amp;quot;driving&amp;quot;, &amp;quot;walking&amp;quot;, &amp;quot;bicycling&amp;quot;, &amp;quot;transit&amp;quot; # get Google API key from following website: # https://developers.</description>
    </item>
    
    <item>
      <title>用Python解置换群问题</title>
      <link>http://luochang212.github.io/posts/python_math_problem/</link>
      <pubDate>Sat, 16 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>http://luochang212.github.io/posts/python_math_problem/</guid>
      <description>室友问我一个问题，把我难住了。
想不出解法，遂写了个程序暴力求解。
 题目：A permutation is applied to the string SUPERBGOLDHAT. The same permutation is applied to the output from this operation. The second output is OGTHLEPDSUARB. What was the first output? (Note: as an example, the permutation(1 3 4) applied to WOLF gives FOWL. Write your answer in capital letters inside quotation marks, e.g. &amp;ldquo;BEARDPLUGHOST&amp;rdquo;.)
 译成中文就是：一个置换作用于字符串时，会生成一个新字符串。已知，某个置换作用于字符串SUPERBGOLDHAT两次，生成字符串OGTHLEPDSUARB, 求该置换作用于字符串SUPERBGOLDHAT一次，生成的结果。
近世代数基础 首先简单说明一下什么是置换，学过近世代数的同学可以跳过这部分
我们给定一个序列 $a =\{1, 2, 3, 4, 5, 6\} $ 然后给定一个该序列的置换 $$\sigma = \left\{\begin{matrix}1 &amp;amp; 2 &amp;amp; 3 &amp;amp; 4 &amp;amp; 5 &amp;amp; 6 \\ 3 &amp;amp; 5 &amp;amp; 2 &amp;amp; 6 &amp;amp; 4 &amp;amp; 1\end{matrix}\right\} $$ 那么，置换 $\sigma$ 的作用就是，把序列 $a $ 中的1变成3，2变成5，3变成2，4变成6 $\ldots$ 以此类推 第一次: 3 5 2 6 4 1 第二次: 2 4 5 1 6 3 第三次: 5 6 4 3 1 2 上面表示置换的方法叫**两行式**，此外，我们还可以用**轮换**来表示一个置换 举个例子，如下是一个两行式表示的置换 $$\tau = \left\{\begin{matrix}1 &amp;amp; 3 &amp;amp; 4 \\ 3 &amp;amp; 4 &amp;amp; 1 \end{matrix}\right\} $$ 它表示成是轮换是 $\tau = (1 3 4) $ 以上的 $\tau $ 和 $\sigma $ 都属于 k-循环置换 如果一个变换将 i&amp;lt;sub&amp;gt;1&amp;lt;/sub&amp;gt; $\rightarrow$ i&amp;lt;sub&amp;gt;2&amp;lt;/sub&amp;gt;, i&amp;lt;sub&amp;gt;2&amp;lt;/sub&amp;gt; $\rightarrow$ i&amp;lt;sub&amp;gt;3&amp;lt;/sub&amp;gt;, $\ldots $ i&amp;lt;sub&amp;gt;k&amp;lt;/sub&amp;gt; $\rightarrow $ i&amp;lt;sub&amp;gt;1&amp;lt;/sub&amp;gt;, 而其他各元不变，那么该置换称为**k-循环置换**(k-cycle)，写作 ( i&amp;lt;sub&amp;gt;1&amp;lt;/sub&amp;gt;,i&amp;lt;sub&amp;gt;2&amp;lt;/sub&amp;gt;,i&amp;lt;sub&amp;gt;3&amp;lt;/sub&amp;gt; $\ldots $ i&amp;lt;sub&amp;gt;k&amp;lt;/sub&amp;gt; ).</description>
    </item>
    
  </channel>
</rss>