<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Redis on Chang Luo</title>
    <link>https://luochang212.github.io/tags/redis/</link>
    <description>Recent content in Redis on Chang Luo</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 18 Aug 2024 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://luochang212.github.io/tags/redis/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>初试向量引擎：RediSearch 和 Milvus</title>
      <link>https://luochang212.github.io/posts/redis_util/</link>
      <pubDate>Sun, 18 Aug 2024 00:00:00 +0000</pubDate>
      <guid>https://luochang212.github.io/posts/redis_util/</guid>
      <description> 如果你只是想建立索引，将文本作为 key 存取对应的 Embedding，Redis 完全够用了。此种场景下的需求无非就是如此，最多再为每个 key 加上过期时间。但是一旦有向量检索需求，那就可以考虑使用向量引擎：&#xA;Redis 的 RediSearch 模块是一种很棒的解决方案，与 Redis 生态无缝衔接且功能强大 Milvus 的优点是方便。它集成了 Embedding 生成功能。你甚至可以直接用文本召回相似文本，无需手动处理 Embedding GitHub 项目地址：redis-util&#xA;✨ 本文做了什么：&#xA;在容器中运行 Redis，并将数据卷挂载到本地 使用 Python API 连接 Redis，并进行基础的 CURD 操作 不凭借任何插件，使用原生 Redis 存取向量 使用 RediSearch 存取向量，并获取 TOP N 最近邻向量 尝试开源向量引擎 Milvus 注意：运行以下代码依赖 util.py 文件。&#xA;一、安装 Redis 下载镜像文件 启动容器 交互式 shell 测试连接 处理 CURD 逻辑 查看笔记 二、用 Redis 存取 Embedding Word2vec 生成 Embedding 数据类型转换 存取 Embedding 查看笔记 三、RediSearch 模块 安装 Docker 镜像 存取向量 查找最近邻向量 查看笔记 四、开源向量引擎 Milvus 文档：milvus 查看笔记 × </description>
    </item>
  </channel>
</rss>
