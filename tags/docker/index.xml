<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Docker on Chang Luo</title>
    <link>https://luochang212.github.io/tags/docker/</link>
    <description>Recent content in Docker on Chang Luo</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 23 Nov 2024 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://luochang212.github.io/tags/docker/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Docker 命令速查手册</title>
      <link>https://luochang212.github.io/posts/docker_command/</link>
      <pubDate>Sat, 23 Nov 2024 00:00:00 +0000</pubDate>
      <guid>https://luochang212.github.io/posts/docker_command/</guid>
      <description>在低版本的服务器或存在共用关系的大组环境里，Docker 是个好东西。Docker 可以提供独立的运行时环境，以免受其他服务和人的干扰。&#xA;GitHub 项目地址：docker-command&#xA;一、什么是 Docker Docker 是一种容器技术。它通过轻量级的虚拟化，将程序及其依赖打包到一个被称为 容器 的独立运行环境里，从而保证应用在不同环境中的一致性。&#xA;容器与虚拟机，在功能上类似，但更加轻量化。容器提供的是操作系统级别的虚拟化；而虚拟机提供的是硬件级别的虚拟化。不同于虚拟机要为每个实例运行完整的操作系统，容器共享操作系统内核，因此更轻量、更高效。不过，轻量化的设计也带来了一些限制，例如 systemctl 等服务管理工具通常在容器中不可用。&#xA;1.1 核心组件 在上手 Docker 前，有必要了解它的核心组件：&#xA;镜像 (Image): 镜像拥有运行应用所需的一切，包括操作系统、代码、依赖等 容器 (Container): 容器由镜像创建，每个容器拥有独立的运行环境 你无法直接运行镜像，必须由镜像创建对应的容器才能运行。可以认为容器是镜像的实例。镜像负责存储与分发，容器负责提供服务。&#xA;1.2 主要用途 Docker 的主要用途包括：&#xA;轻量级虚拟化：可以当成虚拟机使用 支持微服务架构：每个服务运行在独立容器中，易于扩展和管理 支持 CI/CD 流水线：一次打包，即可在所有环境中运行 保证环境的一致性：确保测试、开发、生产环境一致 如果你还不了解 Docker，可访问以下资源：&#xA;官网：https://www.docker.com/ 入门文档：https://docs.docker.com/guides/ 二、常用命令 2.1 基础操作 命令 描述 docker info 查看 docker 系统信息 docker version 查看 docker 版本信息 docker --version 查看 docker 简略版本信息 docker login 登录 DockerHub docker login nvcr.io 登录 nvcr.io 2.</description>
    </item>
  </channel>
</rss>
