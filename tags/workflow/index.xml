<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Workflow on Chang Luo</title>
    <link>https://luochang212.github.io/tags/workflow/</link>
    <description>Recent content in Workflow on Chang Luo</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 15 Jun 2025 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://luochang212.github.io/tags/workflow/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Agent 实战：智能路由、任务拆解和链路工程</title>
      <link>https://luochang212.github.io/posts/agent_project/</link>
      <pubDate>Sun, 15 Jun 2025 00:00:00 +0000</pubDate>
      <guid>https://luochang212.github.io/posts/agent_project/</guid>
      <description>大模型天生具有幻觉，为了保证工程的准确性，我们奉行“非必要不Agent”原则。我们是专业的，除非忍不住，否则绝不用 Agent。&#xA;特别声明：本文使用 Qwen Agent 实现。&#xA;本文包含以下两个项目：&#xA;1）智能路由&#xA;概述：如果一个业务可以分很多种情况处理。针对每种情况，我们开发一个工具函数 (Function Calling)，来处理此种情况内部的复杂性。此时，Agent 充当智能路由的角色，将对应的情况路由到对应的工具函数。工具函数内部带有描述信息，Agent 可以访问这些信息，以此判断在何种情况下，调用这个工具函数。&#xA;具体来讲，本项目开发了一个 客诉核查 Agent。针对 物流逾期 和 假货 两种客诉，分别开发了对应的工具函数。Agent 通过接入工具函数，获得了核查以上两种客诉真实性的能力。当我们将客诉信息传递给 Agent，它会输出针对该客诉的 核查结论 和 相应证据。&#xA;2）数据库查询优化&#xA;概述：数据库查询是一个非常通用的需求，其中 NL2SQL 是难点。为了提升 NL2SQL 的准确性，很容易想到把数据表的 Schema、样例数据、个别字段的枚举值作为上下文 (context) 注入到原始 Prompt 中。本项目实现了这一点。&#xA;具体来说，本项目做了以下工作：&#xA;启用 Qwen Agent 的 ReActChat 模式，以提升多步骤情况下的性能 开发定制的 Workflow，用于将 Schema 等上下文信息注入原始 Prompt 中 开发可流式对话的 Gradio WebUI，以方便调试 Agent 和 Workflow ✨ 所有代码见 GitHub 仓库：luochang212/agent-project&#xA;一、引言 1. 尚未到来的涌现 We always overestimate the change that will occur in the next two years and underestimate the change that will occur in the next ten.</description>
    </item>
  </channel>
</rss>
