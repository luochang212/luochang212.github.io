<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>plan on Chang Luo</title>
    <link>http://luochang212.github.io/tags/plan/</link>
    <description>Recent content in plan on Chang Luo</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 24 May 2019 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="http://luochang212.github.io/tags/plan/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>JavaScript初探 - 制作表格生成工具</title>
      <link>http://luochang212.github.io/posts/to_do_list/</link>
      <pubDate>Fri, 24 May 2019 00:00:00 +0000</pubDate>
      
      <guid>http://luochang212.github.io/posts/to_do_list/</guid>
      <description>项目链接：计划表生成工具
JavaScript虽然名字里带着Java，但和Java没有一毛钱关系。身为一个JavaScript新手，我并不是适应JavaScript的编程习惯。Java的一些基本概念和操作JS并不支持，比如类、继承。同时，它也不像Python那样对全局变量和局部变量有明显的区分。JS的var和let与python的self一比，立马相形见绌。
但是新手的问题，在于由陌生产生隔阂。很容易因为固有的编程习惯，而忽视新语言的特性。哪怕目前我对JS编程不太感冒，但我依旧深知JS的强大。尤其是在可视化这一方面，在玩qtwebengine的时候就已经感受过一次了。
目前，我JS的学习平台是W3Schools，中英文站点双管齐下。对这个网站我非常好评，入门的话不需要换平台，就它一家足矣。
其实我学JS不到一周，所涉甚浅，不过为了记录学习心得和思考过程，所以开了此文。
初衷 制作一个表格生成工具和我的初衷相距甚远。原本我想做一个习惯统计工具，分析一下自己是否能把一些长期计划坚持下来。但我认为部署这个工具，起码需要一个动态网页才能办到，我的分析过程如下。
做一个习惯统计工具，
 需要用户能够注册。声明我是谁，并把我和我的数据绑定。 需要将数据存成文件，而不是像现在一样直接从缓存里下载。 需要按时间戳对生成的数据进行统计。哪天没打卡，哪天打卡了，哪天打卡了但没完成任务，后台必须清楚。 需要对最终结果制作统计图表，这个JavaScript倒是没问题。  以上。
通过分析，我们拆分了实现此工具的步骤。对于一个静态网页，难度主要在一二两步上。尤其是对GitHub托管的静态网页而言，不通过git根本没法存数据。对于俺们新手，技术成本过高，还是留待将来拥有动态网站以后，再做尝试。退而求其次，我选择做一个单一的表格，仅仅记录当天计划完成的情况。
需求分析 我已经习惯了在写一个project之前，对其进行需求分析和步骤拆分，这有利于理清编程思路。
那么，制作这么一个计划表生成工具，有哪些需求呢？下面一一列举：
 一个UI界面（前端） 一个允许用户做输入、选择和修改操作的数据流（后端） 一个最终显示的表格（前端） 判断此工具是否easy to use，找到不好用的因素并改进 （测试）  步骤分析 此时我们的big picture就已经明确。战略定了，下面来定战术。
（一）添加计划
首先对于前端UI，我们需要一个textarea，用来接收每项计划的内容。然后需要一个按钮，将该计划添加进计划列表。我把每项计划存成“计划类”下的一个对象。
这个类的声明如下：
var Items = { name: &amp;quot;&amp;quot;, isCheck: &amp;quot;false&amp;quot;, isDelete: &amp;quot;false&amp;quot; };  每次添加计划，我们都要实例化该类下的一个对象：
var item = Object.create(Items);  实例化的对象有三个值，它们分别表示该对象的名称，是否完成，以及是否删除。
（二）生成表格
这是最富有技巧的一步，因为这里需要接收checkbox和button的值，并且将对应的计划和这些个checkbox以及button绑定。我们现在有n个计划，即n个items，那么我也就有n个的checkbox和delete button.
要知道，用for loop遍历subArray的过程，就是生成表格内容的过程。所以，checkbox和button都是在这个过程中生成的。那么我们就可以在它们生成的过程中，将它们的id和对应的计划绑定。为了便于处理，我是把id和for loop中的循环数 i 绑定了。因为 i 是从0开始的，也就意味着id若和 i 绑定，则它和subArray(int)中的函数自变量一一对应且值相同。这可是莫大的便利。
for (i = 0; i &amp;lt; subArray.</description>
    </item>
    
  </channel>
</rss>