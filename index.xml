<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Chang Luo</title>
    <link>http://luochang212.github.io/</link>
    <description>Recent content on Chang Luo</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 25 Jul 2020 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="http://luochang212.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>漫谈 Hadoop Streaming</title>
      <link>http://luochang212.github.io/posts/hadoop_intro/</link>
      <pubDate>Sat, 25 Jul 2020 00:00:00 +0000</pubDate>
      
      <guid>http://luochang212.github.io/posts/hadoop_intro/</guid>
      <description>本文主要聚焦如何用 Hadoop Streaming + Python 来编写 Hadoop 程序。
 Hadoop 是一个用于大数据处理的分布式计算框架。
众所周知，实现分布式计算是一个繁琐的过程，Hadoop 通过一个标准化的数据处理流程，简化操作步骤，让没有分布式计算背景的程序员也能轻松写出分布式程序。Hadoop 本身是用 Java 写就的，因此对于非 Java 程序员来说，学 Hadoop 必须先学 Java，这大大降低了 Hadoop 的友好程度。
Hadoop Streaming 就是为了解决这个问题的，它支持用其他编程语言编写 Hadoop 程序。
1. 分布式系统的由来 经历半个多世纪的高速增长，半导体工业在本世纪初触及了它的物理瓶颈，摩尔定律失灵，硬件算力不再高速增长，人们开始关注利用软件方法来提升算力。
2003年，两名谷歌工程师开发了一个分布式存储系统，这是它的前身。经过几位后来者添枝加叶，该系统在 2006 年开源，并发展成为今天我们熟知的 Hadoop。
使用分布式系统，显而易见的好处是能够缩短程序运行的时间。在常规时间就能跑完的程序上使用 Hadoop 无异于画蛇添足。但是对大数据开发人员来说，使用 Hadoop 意味着不必坐在电脑前为了结果等上一整天。如果集群效率够高，完全可能在几分钟内完成单机一天的计算量。
2. Hadoop 基本介绍 Hadoop 是一个分布式计算框架，它由两个重要部分组成：HDFS 和 MapReduce。
HDFS 是一个分布式存储系统，它负责将文件切割成分片，然后分发到集群中的目标机器上进行存储；MapReduce 负责构建一个标准化的数据处理流程，在完成其规定的几道数据处理流程之后，用户将得到他们期望的结果。
这意味着 Hadoop 的学习至少包括两个部分。要掌握 HDFS，你需要掌握 Hadoop 命令行命令，这将在第7节详细介绍。要掌握 MapReduce，如果你是 Python 开发者，你需要掌握 Hadoop Streaming，这将在下一节中介绍。
3. MapReduce MapReduce 的重要性不言而喻，它定义了数据在 Hadoop 中被如何处理。MapReduce 包含三个重要过程：Map, Shuffle 和 Reduce。其中，Map 和 Reduce 由我们来编写，Shuffle 则由系统自动完成。</description>
    </item>
    
    <item>
      <title>Python 工程化实践</title>
      <link>http://luochang212.github.io/posts/python_practice/</link>
      <pubDate>Sun, 14 Jun 2020 00:00:00 +0000</pubDate>
      
      <guid>http://luochang212.github.io/posts/python_practice/</guid>
      <description>学 Python 不应仅限于学习程序设计，在工程实践中同样存在大量知识，比如虚拟环境的搭建、编码风格的养成以及如何编写单测等等。本文致力于介绍 Python 走向工程化所需的前置知识。
 ⚠️ 注意：以下教程适用于 MacOS。
部署环境 1. Anaconda Anaconda 是一个包管理器，它能让你方便的管理 Python 版本和包版本。并且， Anaconda 聚合了 Jupyter notebook，使其大受数据科学家和人工智能工程师的欢迎。下面我们来介绍如何用 Anaconda 管理我们的 Python 环境。
如果你还没有 Anaconda，安装一个：
 海外用户直接访问 Anaconda 官网 下载即可 国内用户无法访问Anaconda 官网(被墙)，建议选择清华镜像替代。  安装完以后，在命令行界面输入 conda，会打印一个帮助文档。
帮助文档大概是说 conda 有哪些常用命令，比如下面这些：
$ conda help # 打印帮助文档 $ conda info # 查看conda信息，包括当前在哪个环境，环境路径，Python版本等信息 $ conda list # 列出conda下安装了哪些包 $ conda install [package_name] # 在conda环境中安装某个包 $ conda update [package_name] # 升级conda环境中的某个包   Note：后文仅专注介绍虚拟环境相关内容，更多内容请在 Anaconda 官方文档 中查看。</description>
    </item>
    
    <item>
      <title>算法集萃</title>
      <link>http://luochang212.github.io/posts/algorithms/</link>
      <pubDate>Fri, 03 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>http://luochang212.github.io/posts/algorithms/</guid>
      <description>算法学习笔记，长期更新  GitHub项目地址：python-tips/algorithms
target: right = mid return -1 ``` （2）100 以内质数 统计 100 以内质数的数量。 ```python class Solution: def prime(self): ans = [2] for i in range(3, 100): flag = True for j in ans: if i % j == 0: flag = False if flag: ans.append(i) return ans ``` （3）计数质数 LeetCode 204 统计所有小于非负整数 n 的质数的数量。 ```python class Solution: def countPrimes(self, n): if n 排序 本节介绍各种排序算法的思路和特点，并提供了示例代码。
 插入排序  直接插入排序 希尔排序  交换排序  冒泡排序 快速排序  选择排序  简单选择排序 堆排序  归并排序  二路归并排序    查看示例</description>
    </item>
    
    <item>
      <title>用魔法打败魔法！</title>
      <link>http://luochang212.github.io/posts/chico_and_dico/</link>
      <pubDate>Fri, 21 Feb 2020 00:00:00 +0000</pubDate>
      
      <guid>http://luochang212.github.io/posts/chico_and_dico/</guid>
      <description>Chico 和 Dico 是两位魔术师，他们有一个经典魔术：根据任意四张牌猜第五张牌。但完成这个魔术并不需要任何魔术师的技巧，因为它完全建立在数学原理之上。只需要一点数学知识和充分的练习，你也能表演这个魔术！
 GitHub项目地址：chico-and-dico
Chico 和 Dico 的魔术 Chico 和 Dico 是两位魔术师，他们经常表演的一个魔术是这样的：Chico 将一副 52 张的扑克牌交给一位观众，让他随机抽取其中的 5 张。然后 Chico 将这 5 张牌按一定的顺序重新排列，再将其还给观众。上述整个过程 Dico 都是看不见的。然而，当观众按 Chico 排好的顺序依次展示前四张牌之后，Dico 却能准确地说出第五张牌是什么。
乍一看这个魔术很神奇。随机抽取 5 张牌，你能从前 4 张牌中看出第 5 张牌是什么吗？对于普通人来说，当然不可能。Chico 和 Dico 的秘诀在于 Chico 有机会将扑克重新排序。如果两人事先约定好某种协议，Chico 是有可能通过扑克排列的顺序，向 Dico 传递关于第 5 张牌的信息的。
关键在于如何实现这种协议。
数学模型 在进行分析之前，我们需要把 Chico 和 Dico 的魔术抽象成一个数学模型。
魔术本身已经提供了一些建模信息。我们可以假设一共有 n 张牌，抽取其中的 k 张。在对牌组进行某种排序之后，我们需要利用前 (k - j) 张牌的信息，推测后 j 张牌是什么。
现在我们有 n, j, k 三个变量，下面我们来进一步探究三个变量之间究竟服从何种关系。</description>
    </item>
    
    <item>
      <title>达尔文的故乡</title>
      <link>http://luochang212.github.io/posts/uk_experience/</link>
      <pubDate>Wed, 12 Feb 2020 00:00:00 +0000</pubDate>
      
      <guid>http://luochang212.github.io/posts/uk_experience/</guid>
      <description>英国小镇 Shrewsbury 是达尔文的故乡。这里有丰沛的水系、星罗棋布的公园、历史悠久的建筑。这里没有如织的游人，是一座安静的小镇。
 9月初，学校的学习任务告一段落，国际生们纷纷准备回国。但大部分人由于论文或者旅行计划等问题，还要再多待一段时间。大量短租需求突然涌现，使本地公寓的生意一时十分火爆。
看着 Airbnb 上比平时高了百分之二百的房租。我决定离开这座城市，去别处居住一段时间。
达尔文的故乡 Shrewsbury 是达尔文的故乡。这是一座有很多河流，很多桥，很多公园的小镇。人不多，十分安逸。
这并不是我第一次来这里。寒假我曾周游英国，游历 11 座城市，我对 Shrewsbury 颇有好感。因此这次离开英国之前，我选择故地重游。
房东 房东是一对老夫妻，有很多孩子。现在孩子已经和他们分开居住，所以剩下了许多空房。我住的是他们小儿子的房间。
我还记得，一次早餐之后，我问女房东英国还有像 Shrewsbury 这样美丽的小镇吗？房东对我的问题有些不解，她说: everywhere in this country。嘿嘿嘿，这回答可有些过于骄傲了。英国美丽的小镇不少，但此地的风景绝对算得上中上水平了。
夫妻俩日子过得讲究，早上要喝茶，晚上要下馆子。只有中午吃得简陋一点，一般是烤面包或者三明治。
他们下午会去遛狗。狗是一只小母狗，唤作莉莉。
有天我去超市买东西，正好遇见他们遛狗回家。逆着夕阳，两人牵手回家的场景让我有一瞬间的恍惚，仿佛我看到的是两个夕阳下的青年。他们脸上明媚的笑容和热情的招呼让我忘记了他们的年纪。
屋里屋外 他们的房子是个独栋别墅，有车库和后院。从房子的年龄看，他们已经富裕了很多年。
我房间的窗外是一片森林。夜晚森林里黑得诡异，让人想起中世纪的欧洲。白天森林里阳光普照，林间空地上，几个孩子在做游戏，边上是孩儿妈，坐在木头长椅上发呆。
房东很有品味，屋里挂着很多抽象到看不懂的布艺和画，桌子上摆着陶的木的装饰品。当然，最使人羡慕的还是他们的阳光房，布置得实在是太美啦！
小镇风光 房东家在郊区，但距离小镇不算太远，步行半小时就能到镇上。
这里和大多数英国小镇一样，有许多老房子和老街道。数百年前的城市风貌一直延续到了今天。
众多的水系、桥梁、公园组成了这座小镇迥异的风景线。
一条凶狠霸道的链子！
后记 英国城市的优点可以归结为以下三点：
 英国的主要产业是金融、教育和文化产业。这些行业污染低利润高，所以英伦三岛才有如此美丽的自然风光。
 近代城市文明是英国率先建立起来的。无论是建筑技术还是审美都是一脉相承。所以英国的古建筑和现代建筑之间能够相处融洽、相得益彰。
 英国的城市一般规模小车流小，很少有建宽大主干道的需求。客观上道路对行人通行的切割和限制就少了很多，于是更加 walkable。
  这些因素共同造就了英国独特的城市风貌和交通格局。其中的某些优点中国还无法复制。但有些经验，或许可以启发当代中国的建设者。尤其是和英国城市格局相近的中国县城和小镇，他们颇能借鉴英国在城市交通、景观园林、商业布局等方面的设计。</description>
    </item>
    
    <item>
      <title>贝叶斯方法</title>
      <link>http://luochang212.github.io/posts/bayesian/</link>
      <pubDate>Fri, 31 Jan 2020 00:00:00 +0000</pubDate>
      
      <guid>http://luochang212.github.io/posts/bayesian/</guid>
      <description>统计学中有两大学派，频率学派和贝叶斯学派。频率派用总体信息和样本信息进行统计推断。而贝叶斯派除了使用以上两种信息之外，还使用先验信息进行统计推断。本文从数学原理和编程实践两个方向探究贝叶斯方法。
 本文从数学原理和编程实践两个方面来介绍贝叶斯方法。
数学原理 贝叶斯理论包含很多内容。我们熟悉的利用先验分布推后验分布的方法被称为贝叶斯推理（Bayesian inference）。此外，还可以利用参数的后验分布的均值作为该参数的点估计，这种方法被称为贝叶斯估计（Bayesian estimation）。本文数学原理部分主要介绍贝叶斯推理和贝叶斯估计。
理论部分为六节，各节的主要内容如下。
   章节 主要内容     第一节 用一个简单的实例，让大家对贝叶斯方法有一个形象的认识。   第二节 用一个复杂的实例，让大家对贝叶斯方法的术语有一个形象的认识。   第三节 介绍贝叶斯公式的事件形式及其推导。   第四节 介绍贝叶斯公式的密度函数形式及其推导。   第五节 介绍贝叶斯估计。   第六节 探索联合分布蕴含了哪些信息。    一、实例：癌症化验的准确率 下面请各位做题家们做一下你们最爱的经典老题 📖 题目 有两个可选的假设：
病人有癌症（cancer）、病人无癌症（normal）
可用数据来自化验结果：
正（+）、负（-）
有先验知识：
在所有人口中，患病率是 0.8%。对确实有病的患者的化验准确率为 98%，对确实无病的患者的化验准确率为 97%，总结如下：
$ P(cancer) = 0.008, P(normal) = 0.992 \\ P(+ | cancer) = 0.98, P(- | cancer) = 0.</description>
    </item>
    
    <item>
      <title>我的 Python 不可能这么麻烦</title>
      <link>http://luochang212.github.io/posts/python_tips/</link>
      <pubDate>Thu, 14 Nov 2019 00:00:00 +0000</pubDate>
      
      <guid>http://luochang212.github.io/posts/python_tips/</guid>
      <description>Python 学习笔记，如有错误，欢迎指正  GitHub项目地址：python-tips
语言基础 列表 本文从以下几个方面介绍列表：
 创建 获取 修改 添加 插入 删除 排序 逆序 索引 循环 列表推导 切片 复制 去重 计数 查找   查看示例 
字典 鉴于 JSON 在数据处理中的大量使用，字典的重要性也不言而喻。
本文从以下几个方面介绍字典：
 创建 获取 更新 遍历 排序 删除 字典与JSON collections.defaultdict() setdefault()   查看示例 
字符串 除了列表和字典，字符串也是 Python 中一种非常重要的数据类型。
 基本操作 格式化 字符串方法   查看示例 
函数 本文目录：
 形参和实参 位置实参 关键字实参 默认值 位置实参和关键字实参的混用 默认值、位置实参和关键字实参的混用 传递任意数量的位置实参 传递任意数量的关键字实参 由字符串函数名生成可调用的函数   查看示例</description>
    </item>
    
    <item>
      <title>Elasticsearch 初探</title>
      <link>http://luochang212.github.io/posts/elastic_search/</link>
      <pubDate>Thu, 24 Oct 2019 00:00:00 +0000</pubDate>
      
      <guid>http://luochang212.github.io/posts/elastic_search/</guid>
      <description>Elasticsearch 是一个开源分布式全文搜索引擎。它建立在当前最先进有效的搜索引擎库 Lucene 之上。Elasticsearch 集成了 Lucene 的检索功能，并通过一套简单的 API 隐藏了 Lucene 的复杂性，使之简单易用。
 初识 ES 的初步介绍
本节将介绍 ES 的几个特性。这些介绍能帮助我们理解 ES 是应什么需求诞生的？它解决了什么问题？它为何如此架构？以及这种架构方式为它带来哪些性能上的提升？这些信息虽然不能直接提升我们使用 ES 的能力，但能从更深的维度帮助我们使用好它。
不仅仅是搜索 ES 不仅能够搜索，它还提供一套分布式实时存储文档的解决方案。 ES 允许用户将数据存储在多个服务器节点上。这些节点能实时共享数据。一旦主节点的内容发生改变，这些改变会实时传递到副节点上，以保证主副节点的内容一致。如果主节点掉线，ES 能立即选举出一个副节点充当主节点。选举过程就像切换开关一样，能够在瞬间完成，从而保证了 ES 的可靠性。
分布式的存储方案不仅仅是基于数据安全的考量，同时也是为了加快检索的速度。利用 MapReduce，ES 可以在多个节点上并行地检索数据，大大缩短了海量数据处理的时间。
领域专用语言 为了统一查询语法，ES 设计了一套领域专用语言 (DSL, domain specific language)。这套语言基于 JSON，优点是简单易学，缺点是在表达复杂的查询时，会显得格外冗长，阅读起来也不太友好。
SQL 和 NoSQL SQL 全称 Structured Query Language。SQL 中的 Structured 突出了它是结构化的查询语言。结构化即受字段限制。SQL 数据库中的每条数据都具有相同的长度，因此可以被视作一张数据表。相比于 SQL，NoSQL 能表达更复杂的内部数据结构。字段之间不相互影响，可以拥有各自的层级结构。因此 NoSQL 数据库要比 SQL 数据库更加灵活且易于拓展。NoSQL 数据库中的数据通常用 JSON 表示。
入门 一些简单概念
文档 在 ES 中，文档是一个特定的术语。它表示用来存储对象的存储单元。一个对象通常不会是简单的键值对，它可能包含更复杂的数据结构，比如日期、地理数据、数组等。为表达这种复杂的、多层次的数据，ES 将 JSON 作为文档存储的固定格式。也就是说在 ES 里，一个文档被存成一个 JSON 值。</description>
    </item>
    
    <item>
      <title>Monaco Editor 入门指南</title>
      <link>http://luochang212.github.io/posts/monaco_editor_tutorial/</link>
      <pubDate>Mon, 07 Oct 2019 00:00:00 +0000</pubDate>
      
      <guid>http://luochang212.github.io/posts/monaco_editor_tutorial/</guid>
      <description>Monaco Editor 是一款开源的在线代码编辑器。它是 VSCode 的浏览器版本，随着近年 VSCode 大热，Monaco Editor 也随之走红。目前虽未登上 Online Editor 领域的宝座，却也隐然有超越几位老前辈（指 CodeMirror, Ace 之流）之势。
  var i = 0; function show_name(id) { i += 1; if (i%2 == 0) { document.getElementById(id).style.display = &#34;none&#34;; } else { document.getElementById(id).style.display = &#34;inline&#34;; } }  GitHub项目链接：monaco-editor-demos
在学习 Monaco Editor 的过程中，我发现网络上的中文教程很少。为了填补这部分空白，我决定写一份入门教程，帮助初学者快速熟悉 Monaco Editor。通过阅读本文，你可以了解以下内容：
 如何安装 如何搭建 如何调用常用 API 如何寻找学习资源  安装 新建项目文件夹，打开它：
$ mkdir my-application $ cd my-application  确保你已经下载了 npm，然后安装 Monaco Editor：$ npm install monaco-editor  搭建  本文提供了搭建 Monaco Editor 的一种方法，此方法的特点是能够兼容文件系统。如果你希望为后续应用添加文件管理系统，那么参考本文的搭建流程可以避免不必要的踩坑。添加文件系统的具体方法参见 monaco-speech-editor。</description>
    </item>
    
    <item>
      <title>【项目】摩纳哥语音编辑器</title>
      <link>http://luochang212.github.io/posts/monaco_speech_editor/</link>
      <pubDate>Thu, 22 Aug 2019 00:00:00 +0000</pubDate>
      
      <guid>http://luochang212.github.io/posts/monaco_speech_editor/</guid>
      <description>摩纳哥语音编辑器（Monaco Speech Editor）是一款适用于视障人群的在线代码编辑器。它在开源编辑器 Monaco Editor 的基础上，开发了专为视障者设计的语音辅助功能，包括鼠标悬浮提示，快捷键操作和代码阅读。
其代码阅读功能尤其强大，用户可以用键盘精确定位指定内容进行阅读。针对同一段代码，它提供多种语音输出模式：字符模式、代码模式、音乐模式、全局模式。这些模式根据用户在不同编程阶段的不同需求，提供差异化的语音输出。比如，当用户对一个语句进行 debug 时，推荐使用字符模式进行语音播放。
如果你对它的功能感兴趣，点击下方链接尝试一下吧  GitHub项目地址：monaco-speech-editor
项目背景 根据世界卫生组织2010年的数据，全盲者在全年龄段人口中所占比例为0.58%。在全盲人口中，大部分是中老年人口。从下图可以看出，致盲风险随着年龄快速升高。在0～14岁人群中，全盲比例仅有0.07%；在15～49岁人群中，全盲比例稍高一些，为0.16%；而在50岁以上人群中，全盲比例则达到了2.39%。
全盲人口的比例不大，但从绝对数值来看却是非常可观的。2010年，世界全盲人口比例为0.58%，但全盲人口数却达到了3936.5万。即使14岁以下人口的全盲比例仅有0.07%，但考虑绝对数值，也达到了142.1万人。
而且并非只有全盲者才需要语音辅助。有相当比例的视力障碍者，即使使用眼镜，也无法矫正到正常视力。这部分的视障者，也是需要语音辅助的。相比于全盲者，视力障碍者的人口则更为庞大，达到了惊人的2亿8538万。
在提倡公平的原则下，我们希望视障者和视力正常的人一样，也能自由地选择职业。事实上现在已经有部分视障工程师，出现在程序员岗位上，证明着他们的实力。本项目旨在为视障程序员编程无障碍化做一些贡献，项目源代码现已在GitHub上以MIT许可证开源。
技术选择 本编辑器是用JavaScript编写的网络应用 (web application)。它只有两项功能需要外部依赖，一个是在线代码编辑器模块，一个是文字转语音模块。
（一）在线代码编辑器
开源的在线代码编辑器还是挺多的，比如：
 Ace CodeMirror Monaco Editor  它们对语法高亮、缩进、代码补全等基础功能都有比较好的支持，用起来大同小异。选择Monaco Editor是因为用惯了VSCode。毕竟Monaco Editor的源代码就是直接从VSCode贴过去的，两者的界面风格和操作方式都极其相似，对VSCode用户比较友好。但后来使用过程中发现打脸了，当然这是后话。
（二）文字转语音
文字转语音 (text to speech) 的应用就更多了，几乎各大公司都推出了自己的应用：
 Amazon Polly Cloud Text-to-Speech Microsoft text to speech API  但鉴于这些应用都需要网络连接，才能获取语音。考虑到网络延迟和脱机使用的问题，本项目并未采用以上任何一种API，而是选择了Web Speech API。Web Speech API本身并不提供语音服务，它事实上起到资源连接的作用。它首先会搜索操作系统，然后将操作系统提供的语音支持集合成一个列表，提供给浏览器使用。所以Web Speech API提供的语音支持会随用户系统的语音支持项而发生变化。因此不排除一些较老的机型无法使用的可能。但本项目认为本地化语音支持比之于对老机型的支持更加重要，因此选择了Web Speech API。这也是一个取向问题。
综上，本项目主要依赖项只有两个：Monaco Editor 和 Web Speech API。事实上，本项目的名称 Monaco Speech Editor，也正是取自这两个依赖项。
需求分析 一名视障程序员或一位全盲者，在使用代码编辑器时，主要有以下信息需求：</description>
    </item>
    
    <item>
      <title>Golang 学习笔记</title>
      <link>http://luochang212.github.io/posts/learn_golang/</link>
      <pubDate>Fri, 12 Jul 2019 00:00:00 +0000</pubDate>
      
      <guid>http://luochang212.github.io/posts/learn_golang/</guid>
      <description>Golang是2009年由谷歌的三位大佬(Robert Griesemer, Rob Pike, Ken Thompson)创造的一门新语言。Goalng有很多优点。比如，作为静态类型语言，Golang的依赖少，易于部署。它还支持协程并发，支持垃圾回收，可跨平台编译。Golang兼具动态语言的强大表达能力和C的执行效率，被誉为21世纪的C语言。
  var i = 0; function show_name() { i += 1; if (i%2 == 0) { document.getElementById(&#34;names&#34;).style.display = &#34;none&#34;; } else { document.getElementById(&#34;names&#34;).style.display = &#34;inline&#34;; } }  最近在学习Golang，为了寻找配置教程、优秀的电子书以及难度曲线适中的入门实践项目，我颇费了些功夫。趁着记忆还新鲜，我想分享一下我的学习路径以及学习资料。本文涉及Golang的安装、配置、运行以及实践项目。希望通过阅读本文，初学者们可以更快地找到适合自己的学习方向。
下载安装 官网提供标准安装包，一路点击就能完成安装。
安装包的链接是https://golang.org/dl/，更多关于安装的信息见安装 Go.
环境配置 （一）在终端运行
在命令行运行程序几乎不需要配置。只要下载Golang，然后按官方建议，创建一个名为gocode的文件夹，直接在里面写代码就可以了。为了防止以后import其他包发生错误，建议把gocode文件夹放在GOPATH下。如何知道Golang的工作路径(GOPATH)在哪里呢？打开命令行，输入go env，就能在输出里找到工作路径了（注意区别安装路径和工作路径，它们是两个不同的路径）。
下面是Golang在命令行运行时的一些常用命令：
 Linux系统下的常用命令（点击展开） 新建目录
$ mkdir foldername  
打开目录
$ cd foldername  
返回上一级目录
$ cd ..  
新建go文件
$ touch filename.</description>
    </item>
    
    <item>
      <title>排队论在网络性能分析中的应用</title>
      <link>http://luochang212.github.io/posts/network_performance_analysis/</link>
      <pubDate>Thu, 04 Jul 2019 00:00:00 +0000</pubDate>
      
      <guid>http://luochang212.github.io/posts/network_performance_analysis/</guid>
      <description>排队论(queueing theory)也称随机服务系统理论，它研究的内容有三部分：性态问题、最优化问题和统计推断问题。（《运筹学》清华大学出版社）
下图描述了排队过程的一般流程：
现实中的排队问题是多种多样的，对上述“顾客源”和“服务机构”应该作宽泛的理解。顾客和服务机构可以是生物，也可以是非生物；排队结构可以是有形的，也可以是无形的，比如向交换台要求通话的请求；顾客可以走向服务机构，也可以相反，比如送货上门。
 在网络中，服务器和用户之间相互传送数据包。数据包的传送需要时间，因此或多或少都会产生延迟。为了分析这些延迟，我们引入了一系列假设，并利用排队论对网络延迟进行建模分析。
本文将着重介绍网络性能分析(Network performance analysis)中几种常见的排队模型。它们是：
 The M/M/1 queuing system The birth-death process The M/M/m queuing system The M/M/1/m queuing system The M/M/∞ queuing system The M/M/m/m queuing system  另外，作为以上模型的理论基础，本文将首先介绍柏松过程(Poisson process)。
柏松过程的推导 柏松过程是马尔可夫过程的一个特例，在排队论中经常被用来估计顾客到达的概率分布。
（一）柏松过程的假设
 在时间间隔$\Delta t$内，有且仅有一位顾客到达的概率$P$和$\Delta t$成比例，比例系数为$\lambda$
 在时间间隔$\Delta t$内，至多只允许一位顾客到达（否则应该选取一个更短的时间间隔） $$\begin{aligned} P(\text { 在时间间隔 }[t, t+\Delta t] \text { 内，有且仅有一位顾客到达 }) &amp;amp;=\lambda \Delta t \\ P(\text { 在时间间隔 }[t, t+\Delta t]\text { 内，没有顾客到达 }) &amp;amp;=1-\lambda \Delta t \\ P(\text { 在时间间隔 }[t, t+\Delta t]\text { 内，多于一位顾客到达 }) &amp;amp;=0 \end{aligned}$$</description>
    </item>
    
    <item>
      <title>厨房笔记（二）：快手菜合集</title>
      <link>http://luochang212.github.io/posts/kitchen_time_2/</link>
      <pubDate>Tue, 02 Jul 2019 00:00:00 +0000</pubDate>
      
      <guid>http://luochang212.github.io/posts/kitchen_time_2/</guid>
      <description>做饭累不累？如果你只是偶尔做一顿饭以娱身心，还是挺快乐的。但要是餐餐下厨，就没那么好玩了。一日三餐，少说也要花费两三个小时的光景，不但耗损精力，还挤占学习时间。日复一日地做下来，不累才怪。因此，长期做饭的留学生往往会体现三种趋势：做饭价格向便宜收敛，做饭速度向手快收敛，做饭味道向好吃收敛。因为咱追求的就是便宜美味的同时，又省时省力不麻烦。那么下面就由我来给大家盘点一下那些好吃又方便的快手菜吧 
牛肉丸子汤 原料：牛肉丸、醋、香油、白胡椒粉、辣椒粉、葱
做法：
 锅内放牛肉丸，加水至没过牛肉丸，火开到最大。
 等水煮开的同时，把葱切成葱花备用。
 待水煮开，调成中火，保持水面沸腾。然后开始调味，按个人口味加醋和辣椒粉。加白胡椒半勺，香油数滴。
 牛肉丸还是比较易熟的，水开后再煮五至七分钟，加葱花，稍微再煮一分钟，即可起锅。
  
炸三文鱼 原料：三文鱼片、面粉、盐
做法：
 TESCO买的厚三文鱼片，均匀地敷上面粉，直至表面摸不到水分。
 锅里倒少量油铺匀锅底，开中火将油烧热。
 注意三文鱼易焦，只能开小火煎。翻面也不能太勤，否则鱼容易碎。大概三分钟左右翻一次面，反复翻面直至两面煎至金黄。
 煎十分种左右起锅。注意火候，煎得太短里面不熟，煎得太久肉会变柴。
  
烤羊排 原料：羊排、酱油、孜然、黑胡椒、盐、芝麻
做法：
 羊排切段，加黑胡椒，加酱油，加孜然，加盐腌二十分钟。
 放入烤箱，开170度，烤四十分钟。
 出烤箱后撒点芝麻点缀。
  
淡菜排骨汤 原料：排骨、淡菜、豆腐、生姜、蒜
做法：
 烧一锅水，同时把豆腐切块，淡菜洗干净备用。
 下排骨，煮出浮沫后，将排骨捞出，用冷水把排骨冲洗干净。
 再烧一锅水，下淡菜、排骨、豆腐、两瓣蒜、几片生姜，盖上锅盖煮十分钟。
 淡菜有自身的鲜味，不用调味，起锅即食。
  
炒鸡蛋 原料：鸡蛋、葱、洋葱、猪油
做法：
 葱和洋葱切段备用。蛋打成蛋液，加盐备用。
 把葱白和洋葱下锅炒香，剩余葱段放入蛋液中拌匀，待锅内葱香味溢出，下鸡蛋液。
 鸡蛋液微微凝固时，立刻用筷子从四周向中间拨动，使蛋液凝固过程中均匀受热。注意拨动的节奏，不需要拨得太勤或者太缓。
 当鸡蛋熟了以后，应该还是一整块的，而且比较滑嫩。此时，把筷子插入鸡蛋块中，画圆圈将鸡蛋块打散。
 把打散的鸡蛋再翻炒几下，当鸡蛋表面微焦、香味溢出时即可出锅。</description>
    </item>
    
    <item>
      <title>生态系统建模</title>
      <link>http://luochang212.github.io/posts/nature_system/</link>
      <pubDate>Wed, 12 Jun 2019 00:00:00 +0000</pubDate>
      
      <guid>http://luochang212.github.io/posts/nature_system/</guid>
      <description>本文介绍如何用 Agent-based model 的方法，对一个包含狼、麋鹿、草三种生物的生态系统建模。
 GitHub项目地址：nature-system
Agent指个体，Agent-base model即基于个体的模型。在Agent-based model中，虚拟实体(virtual entity)和现实个体一一对应。一般来说，虚拟实体的属性是对现实个体的抽象，虚拟实体的行为则是依照已经写好的规则迭代。这种建模方式往往涉及个体详细的行为模式，因此适合以研究个体行为规则为目的的建模。
需要注意的是，利用Agent-based model方法建模，并不是变量越多越好，过多的变量会造成调试上的困难。选取的变量足够支撑起我们研究的问题就可以了。
 Note: 除了Agent-base model之外，Equation-based model也是一种比较常见的建模方式。Agent-based model适合表达每个个体身上发生了什么，比如个体的速度、位置的变化等。Equation-based model则而更适合表达系统平均发生了什么，比如人口模型中人口数量变化就更适合用Equation-based model建模。
 模型假设 （一）生物的属性
模型内有三种生物：狼(wolf)、麋鹿(moose)、草(grass)。此外，狼还分为头狼和普通狼。下面这张表展示了头狼、普通狼、麋鹿的属性：
   # age food pos speed last_breed population packNo range eaten     头狼 &amp;radic; &amp;radic; &amp;radic; &amp;radic; &amp;radic; &amp;radic;  &amp;radic; &amp;radic;   普通狼 &amp;radic; &amp;radic; &amp;radic; &amp;radic;   &amp;radic;     麋鹿 &amp;radic; &amp;radic; &amp;radic; &amp;radic; &amp;radic;        从上表可以看出，年龄、食物、位置、速度是头狼、普通狼和麋鹿的共有属性。last_breed指和上一次生育的时间间隔，在模型内用一次迭代表示一次时间间隔，因为迭代必须是整数，因此last_breed也是整型变量。头狼特有population属性，用来表示该头狼所在狼群中狼的数量；头狼特有range属性，表示该狼群活动的范围；头狼特有eaten属性，表示狼群在一次迭代中，全体成员吃到的麋鹿的总数。普通狼特有packNo属性，用来标记其所属狼群的头狼在列表中的索引号。普通狼没有last_breed属性，是因为其生育是以整个狼群为单位的。由于狼群是由头狼定义的，狼群相关的属性和行为也绑定在头狼身上，因此在代码实现上，狼群的生育是通过头狼实现的。</description>
    </item>
    
    <item>
      <title>JavaScript 初探</title>
      <link>http://luochang212.github.io/posts/to_do_list/</link>
      <pubDate>Fri, 24 May 2019 00:00:00 +0000</pubDate>
      
      <guid>http://luochang212.github.io/posts/to_do_list/</guid>
      <description>初次学习JavaScript，用JS写了一个计划表生成工具。
 项目链接：计划表生成工具
JavaScript是一个神奇的语言。它既不像Java原生地支持类和继承，也不如Python声明变量方便，更兼闹出&amp;rdquo;===&amp;ldquo;这样的麻烦。但我依旧深知它的强大，尤其是在可视化这一方面，在接触qtwebengine的时候已经感受过一次了。目前，我学习JS的平台是W3Schools 和廖雪峰的网站。
话说这是我自学JS以来写的第一个程序，求轻虐(￣▽￣)
我的初衷 我的初衷是制作一个习惯统计工具，用来分析我在长期计划上的坚持能力。于是照例我对它做了一个需求分析。
习惯统计工具的需求分析：
 需要用户能够注册。即能够声明我是谁，并且把我和我的数据绑定。 需要将数据存在文件里，而不是存在缓存文件里。 需要按时间戳对生成的数据进行统计。 需要对最终结果制作统计图表。  通过分析，我发现静态网页很难实现第一第二步。能不能实现我不敢下定论，但肯定有技术难度。目前，我只有一个由GitHub page托管的静态网页，因此我选择退而求其次。先学习生成一个单一的表格，来记录当天计划的执行情况。我把这个工具叫做计划表生成工具。
需求分析 计划表生成工具好比是习惯统计工具的一个子系统。习惯统计工具面向的是连续多天，而计划表生成工具只面向单独一天。
计划表生成工具的需求分析：
 一个UI界面（前端） 一个允许用户做输入、选择和修改操作的数据流（后端） 一个最终显示的表格（前端） 判断此工具是否easy to use，找到不好用的因素并改进 （测试）  此时我们的big picture就已经明确。战略定了，下面来定战术。
步骤分析 （一）添加计划
对于前端UI，首先我们需要一个textarea，用来接收每项计划的内容。还需要一个按钮，点下这个按钮时，将文本框内的信息添加到计划列表。为了便于存储，我为计划(item)设计了一个类。
这个类的声明如下：
var Items = { name: &amp;quot;&amp;quot;, isCheck: &amp;quot;false&amp;quot;, isDelete: &amp;quot;false&amp;quot; };  可以看出这个类有三个值。它们分别表示该对象的名称，是否完成，以及是否删除。每次添加计划，用以下代码实例化这个类(items)，生成一个对象(item)：
var item = Object.create(Items);  （二）生成表格
这一步要把复选框(checkbox)和按钮(button)都和每一行的计划绑定。那么如何绑定呢？
要知道，用for loop遍历subArray的过程，就是生成表格内容的过程。所以，checkbox和button也都是在这次遍历中生成的。那么，我们就可以在它们的生成过程中，创建它们的id，并把id和计划对应起来。
具体到代码中，我用了i.toString(10)将循环数转成string类型，然后加到id上。于是，第一项计划对应的checkbox的id就是&amp;rdquo;cb0&amp;rdquo;, 对应的button的id就是&amp;rdquo;btn0&amp;rdquo;, 以此类推。
for (i = 0; i &amp;lt; subArray.length; i++) { var index = i+1; body += &#39;&amp;lt;tr&amp;gt;&#39;; body += &#39;&amp;lt;td&amp;gt;&#39; + index.</description>
    </item>
    
    <item>
      <title>PyQt5 侧边栏布局</title>
      <link>http://luochang212.github.io/posts/pyqt5_layout_sidebar/</link>
      <pubDate>Fri, 10 May 2019 21:43:09 +0100</pubDate>
      
      <guid>http://luochang212.github.io/posts/pyqt5_layout_sidebar/</guid>
      <description>GitHub项目地址：pyqt5-demo
主流软件如网易云音乐、腾讯电脑管家，都有侧边栏。侧边栏能有效扩展应用空间，使软件功能的层次更加分明。
但PyQt5并没有一个专门的方法实现侧边栏。要实现侧边栏，主要有两种技术路线。一是从标签部件(QTabWidget)改造而来，二是用网格布局(QGridLayout)画出来。本文采用第一种技术路线，制作一个简单的侧边栏应用。
 Note: 两种技术路线制作的侧边栏有细微的差别。如果采用第二种技术路线(QGridLayout)，侧边栏和内容页之间没有明显的分界。所以需要额外地在侧边栏和内容页之间加一条线，来突出两者属于不同的组件。而第一种技术路线(QTabWidget)不需要，创建的侧边栏和内容页之间的区别明显。
下图是一个用第二种技术路线(QGridLayout)制作的应用，可以看到侧边栏和内容页中间画了一条线，以突出两个组件的分界。
 步骤分析 在开始写代码之前，我们先分析一下制作侧边栏需要几个步骤。
 添加部件 为部件设置布局 将标签部件改造成侧边栏的内容页 为侧边栏按钮编写函数，实现内容页之间的跳转  添加部件并设置布局 此段不详述。关于部件和布局的基础知识，在上一篇中有介绍，详见PyQt5 布局浅析。
下面这段代码添加了部件且设置了布局。
from PyQt5.QtWidgets import * import sys class Window(QMainWindow): def __init__(self): super().__init__() # set the title of main window self.setWindowTitle(&#39;Sidebar layout - www.luochang.ink&#39;) # set the size of window self.Width = 800 self.height = int(0.618 * self.Width) self.resize(self.Width, self.height) # add all widgets self.btn_1 = QPushButton(&#39;1&#39;, self) self.btn_2 = QPushButton(&#39;2&#39;, self) self.</description>
    </item>
    
    <item>
      <title>PyQt5 布局浅析</title>
      <link>http://luochang212.github.io/posts/pyqt5_layout/</link>
      <pubDate>Fri, 03 May 2019 00:00:00 +0000</pubDate>
      
      <guid>http://luochang212.github.io/posts/pyqt5_layout/</guid>
      <description>PyQt5是Python环境下用来开发UI界面的一个包。它容易上手，对初学者友好，并且拥有丰富的函数库，可以实现大部分桌面应用的开发需求，且支持QSS语言，能够对界面风格做个性化调整。总体来说，PyQt5是一款开发效率极高的UI框架。这篇文章从零开始，教你搭建一个属于自己的桌面应用。
 GitHub项目地址：pyqt5-demo
创建第一个窗口 一般来说，桌面应用都以窗口(window)形式呈现。因此，要搭建桌面应用，首先要创建窗口。
下面这段代码创建了一个空的窗口。
from PyQt5.QtWidgets import * import sys class Window(QMainWindow): def __init__(self): super().__init__() # set the title of main window self.setWindowTitle(&#39;My first window - www.luochang.ink&#39;) # set the size of window self.Width = 500 self.height = int(0.618 * self.Width) self.resize(self.Width, self.height) if __name__ == &#39;__main__&#39;: app = QApplication(sys.argv) ex = Window() ex.show() sys.exit(app.exec_())  这段代码仅仅设置了窗口的标题和大小。下一步，我们要往这个空的窗口里添加部件(widget). 为了规范性，我们在Window类里新建一个函数initUI, 然后在initUI里为窗口添加部件。
为窗口添加部件 下面这段代码为窗口添加了一个按钮部件(QPushButton).
from PyQt5.QtWidgets import * import sys class Window(QMainWindow): def __init__(self): super().</description>
    </item>
    
    <item>
      <title>微博数据可视化</title>
      <link>http://luochang212.github.io/posts/my_weibo/</link>
      <pubDate>Sat, 20 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>http://luochang212.github.io/posts/my_weibo/</guid>
      <description>GitHub项目地址：weibo-analysis
这次的数据用的是本科期间就已经爬好，但因为当时没有足够的处理技巧，这些数据在硬盘里一丢就是两年。如今，本Python初丁趁着还有机会摸鱼，赶紧把数据翻出来，让它们发光发热。
文本获取 因为新浪微博的严防死打，现如今微博的数据越来越不好爬。GitHub上的微博爬虫生存周期通常都很短，使爬取数据的成本大大增加。这里我用的是微博@失眠狸 同学的方法，用鼠标精灵写了个插件，控制快捷键和页面拖动，把内容从浏览器上粘贴到sublime里。
生成csv文件 有了原始数据，接下来我们要把数据归一化，做成方便处理的数据。一个常用的方法就是将数据整理成csv文件。
Step 1. 分析需要保存的字段以及数据的维度，从而设计出数据的存储结构。根据原数据，我划分了五个字段: id, date, time, device, content, 它们分别记录一条微博的文件位置、发布日期、发布时间、发送设备和文本内容。
Step 2. 分割raw data. 先用split函数进行粗略分割，再用find函数精确分割。接着将分割好的内容提取到各字段，并依次存入csv。
经过上述两步，数据的整理工作就做完啦。
可视化微博数据 有了csv文件，做数据可视化是分分钟的事。此时我把工作平台从PyCharm搬到了Jupyter Notebook。这是因为Jupyter Notebook可以制作的各式各样的可视化图表和窗口小工具(widget), 比PyCharm更适合数据处理。至于工具包，这里我选的是pandas和seaborn.
首先是需求分析，我的目标如下:
 绘制日期分布热力图，观察今年使用微博频率的趋势
 绘制设备使用直方图，看看平时最常用什么平台发博
 绘制时间分布直方图，观察一天之中各时段的发博频率
 使用窗口滑块小部件，拖动查看各个时间段都发了什么内容
  这里不描述具体过程，详见GitHub Repository.
分析结果如下:
热力图总体来说颜色逐年加深，说明我正在逐渐成为一个微博控。而且注意到往年年初我是不怎么玩微博的，但随着年纪渐长，1-3月份我玩微博的频率越来越高，这意味着过年可能越来越无聊，没有年味，从而加长了我混迹微博的时间。
是你吗？华为的舔狗~
晚上2点不睡的坏小孩，早上10点起的偷懒者。（此处是一个卑微的笑容）
附录：部分代码 下面这段代码分割了文本。
def classification(self, txt_array, file_index): id = np.array([]) date = np.array([]) time = np.array([]) device = np.array([]) content = np.array([]) count = 0 for ite in range(1, np.</description>
    </item>
    
    <item>
      <title>【项目】TSP旅行路线规划</title>
      <link>http://luochang212.github.io/posts/tsp_route/</link>
      <pubDate>Wed, 10 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>http://luochang212.github.io/posts/tsp_route/</guid>
      <description>GitHub项目地址：tsp-route
对于在欧洲的小伙伴们，复活节假在这一周就正式开始啦。大家都是怎么计划旅行的呢？
我的习惯是在出发前最后一晚，花上半小时，搜索目的地景点 (Point of interest, POI), 然后在Google Maps上为它们点上小星星，以免和它们擦肩而过。我的地图经过一番操作，就成了下面这副模样。
此时此刻，望着这些密集的星星，我不禁自问：如何才能走最少的路，遍历所有景点呢?
搜索了谷歌和百度，都没找到我要路径规划功能。最接近需求的是谷歌地图的&amp;rdquo;Add destination&amp;rdquo;功能。然而这个功能只是依次连接你点选的地点。并不能由一组地点，确定连接它们的一条全局最短路径。
没有现成应用怎么办，我打算自己动手写一个。
下图是Google Add destination功能。
适用模型：TSP 模型 用一句话概括需求就是：我们需要一条从某地方出发，遍历所有地点，最终回到起点的最短路径。
这个需求其实就是运筹学的一个经典问题，旅行商问题(TSP)。旅行商问题的确切描述是这样的：一个商人在各个城市之间旅行，要求遍历所有城市并返回到出发点，要如何规划路线，才能使总路径最短。（打开维基百科了解更多)
解决思路  用googlemaps包获取纬度和经度信息 用OR-Tools包求解TSP问题 最后用gmaps可视化结果  在敲代码的过程中，最难的地方莫过于看文档查API, 搞清楚输入输出和调用结构。不过敲完这一顿之后我还是不禁感慨，GoogleI太为开发者着想了。一旦学会调用API，实现一个简单应用的代码量还是很小的 orz
食用指南 项目地址 &amp;ndash;&amp;gt; 传送门
在运行代码之前，你需要以下配置：
 一个Jupyter Notebook.  你需要安装这些包：googleplaces, googlemaps, gmaps, ortools. 你需要一个Google Maps API key, 从这里获取API.  完成配置等于成功的一半。在Jupyter notebook打开TSPSolver.ipynb，将第二个代码块的所有变量，改成自己的，比如自己的目的地自己的区域和自己的API密码……最后从头到尾运行所有代码块，你就可以得到自己的定制路线辣~
配置代码如下。
# input the places of interest (POI) places = &#39;YHA London Central Hostel&#39;, &#39;Coca-Cola London Eye&#39;, &#39;St. Paul\&#39;s Cathedral&#39;, &#39;Leadenhall Market&#39;, &#39;The National Gallery&#39; \ &#39;Big Ben&#39;, &#39;Buckingham Palace&#39;, &#39;Waterloo Station&#39; # the region Location=&#39;London&#39; # choose a mode Mode = &amp;quot;walking&amp;quot; # &amp;quot;driving&amp;quot;, &amp;quot;walking&amp;quot;, &amp;quot;bicycling&amp;quot;, &amp;quot;transit&amp;quot; # get Google API key from following website: # https://developers.</description>
    </item>
    
    <item>
      <title>Python 解置换群问题</title>
      <link>http://luochang212.github.io/posts/python_math_problem/</link>
      <pubDate>Sat, 16 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>http://luochang212.github.io/posts/python_math_problem/</guid>
      <description>室友问我一个问题，把我难住了。
想不出解法，遂写了个程序暴力求解。
 题目：A permutation is applied to the string SUPERBGOLDHAT. The same permutation is applied to the output from this operation. The second output is OGTHLEPDSUARB. What was the first output? (Note: as an example, the permutation(1 3 4) applied to WOLF gives FOWL. Write your answer in capital letters inside quotation marks, e.g. &amp;ldquo;BEARDPLUGHOST&amp;rdquo;.)
 把它译成中文就是：已知将某个置换作用于字符串SUPERBGOLDHAT两次，生成字符串OGTHLEPDSUARB. 求该置换作用于字符串SUPERBGOLDHAT一次时，生成的结果。
 Note: 作用两次的意思就是，当一个置换规则作用于字符串一次时，会生成一个新字符串。将这个规则作用在这个新字符串上，又会生成一个字符串，这个字符串就是两次作用的结果。
 近世代数基础 如果你不知道什么是置换的话，可以看一下本节。学过近世代数的同学请自觉跳过这部分ꉂ(ˊᗜˋ*)
我们给定一个序列$a ={1, 2, 3, 4, 5, 6} $ 。然后给定一个作用于该序列的置换：</description>
    </item>
    
    <item>
      <title>厨房笔记（一）：牛刀小试</title>
      <link>http://luochang212.github.io/posts/kitchen_time_1/</link>
      <pubDate>Mon, 06 Aug 2018 00:00:00 +0000</pubDate>
      
      <guid>http://luochang212.github.io/posts/kitchen_time_1/</guid>
      <description>刚到英国那会儿，做饭的兴致很高。每天都跟过家家似的，买菜，钻研菜谱，然后做饭，在厨房里待上四五个小时也不觉得累。大概这就是“人生若只如初见”吧。
 
 拌牛肉 原料：牛肉3两，猪油，葱，酱油，地瓜粉1匙半，盐
做法：
 牛肉顺纹路切成宽约一寸的肉条，肉条逆纹路切片，装碗，用自来水清洗，沥干，加入一匙猪油和适量的盐与酱油，用手抓揉片刻后，加入一匙半的地瓜粉，继续抓握揉捏约3分钟即可，葱切好备用；
 五匙猪油下锅，至微热，放入适量葱头和小半葱段，煎至略有香味溢出，起锅备用；
 水烧沸，调至小火，牛肉下锅，先不要搅动，待地瓜粉固结后，可用筷子将牛肉摊开，当水再次沸腾时，用漏勺将肉舀出，趁热放入煎好的猪油中搅拌，菜即成。
  
亲子丼 原料：米饭，鸡肉，洋葱，鸡蛋，酱油，盐，糖，料酒
做法：
 米饭下锅煮，可弃之不顾。
 鸡肉切小块，放酱油、盐、料酒腌一下；洋葱切短条；鸡蛋稍稍打散。
 鸡肉下锅煎至出油，起锅。此时锅不必洗，放半碗水，加酱油、少量料酒和糖。
 待水烧开，放入鸡肉和洋葱。盖锅盖将鸡肉焖熟，然后倒入一半蛋液，盖锅盖小火焖3分钟。
 起锅盖，倒入剩下一半蛋液。菜即成。
  
红烧肉 原料：五花肉，葱，姜，蒜，大料，老抽，生抽，糖，油
做法：
 五花肉切块，葱切段，蒜切末，姜切条。
 倒油，加葱头、姜条、蒜末、大料，小火熬油。油熬出香味后，放五花肉翻炒，闻香即可起锅。
 另起一锅油，倒六七小勺糖，中火将糖煮化。倒入五花肉，翻炒片刻后，加少量水、老抽、生抽。
 时不时搅拌，尝肉汁甜度，不够可加糖。待锅内汤汁收浓稠，起锅享用。
  
牛肉丸意大利面 原料：意面、牛肉丸、葱、蒜、番茄、番茄酱
做法：
 烧一壶开水，倒入电饭锅，加两勺盐，放入螺旋意大利面。面煮不烂，可以弃之不顾。
 切葱头，剁蒜泥，番茄切小块备用。
 烧一锅油，放入丸子，翻面煎至定型。
 起锅后油不倒，加入蒜泥葱头炒香。番茄块倒入锅中炒软，然后加大量番茄酱，继续翻炒，以防番茄酱烧焦。
 捞面放入锅中和酱汁搅和搅和，放入丸子，起锅开吃。
  
葱油鸡 原料：大鸡腿、葱、姜、蒜、料酒
做法：
 鸡肉处理干净后，用盐给它来个大宝剑。盘中先放葱结、姜片、鸡肉，次淋白葡萄酒。
 鸡肉盛于盘内，冷水入锅，小火蒸20分钟。</description>
    </item>
    
    <item>
      <title>【项目】基于蚁群算法的证券投资组合优化</title>
      <link>http://luochang212.github.io/posts/markowitz_model/</link>
      <pubDate>Tue, 15 May 2018 00:00:00 +0000</pubDate>
      
      <guid>http://luochang212.github.io/posts/markowitz_model/</guid>
      <description>在证券交易中，为了降低风险，经常使用一笔资金购买多支股票。那么，如何合理地选择证券组合，并确定每支证券的资金分配系数，以使预期风险最低，预期收益最高，就成了一个经典的经济学问题 &amp;ndash; 证券投资组合优化问题。
 1952年，马科维茨首次提出均值-方差模型(Markowitz Mean-Variance Model)。该模型利用股票的历史交易数据，定义了股票的预期风险与收益，并引入“无差异曲线”和“有效市场边界”的概念，最终导出了最佳投资组合的计算公式。
本文利用蚁群算法，求解马科维茨均值-方差模型。蚁群算法是一个群体智能算法，因其较强的鲁棒性和适用性，被广泛应用于工业界，是一种研究较为成熟的算法。
研究背景 一个证券投资组合，简单来说就是一组证券及其选购系数的组合。选购系数均大于零（不允许做空），且和为1。
余超在《基于蚁群算法的投资组合优化研究》中给出了完整的模型假设。概括如下：
 一只蚂蚁代表了一个投资组合； 在投资组合优化问题中的蚁群算法要采用连续域优化； 相较于传统蚁群问题，该算法中信息素应该在城市而非路径上积累； 可在蚂蚁移动过程中加入随机扰动以增加全局搜索能力。  余超在模型基础上已经做了非常完整的工作，但是没能求出完整的有效市场边界。
于是，卞蓓丽在《蚁群算法在多目标优化的证券投资组合中的应用研究》中指出，多目标优化的证券投资组合问题是没有绝对最优解的，而是有一群无法相互支配的解形成的有效边界。对多目标优化问题而言，最重要的是求出有效边界，而不仅仅是求出一两个更优解，后者用单目标就可以完成。余超的多目标研究没有求出有效边界。”
卞蓓丽提示我们：因为，投资组合问题，本质上是一个多目标优化问题。所以，我们要计算出完整的有效边界曲线，才算达成预期目标。
余超建立了基础模型，而卞蓓丽在余超的基础上进行了改进。本文借鉴他们二人建立的数学模型，利用多元函数连续域蚁群算法，求解马科维茨均值-方差模型。
研究方法 （一）马科维茨投资组合理论简介
投资组合的预期收益($𝒓_𝒑$)：单一证券i的预期收益为$E\left(r_{i}\right) $，式中$r_{i s}$为针对状况s证券i的收益率，$P_{s}$是状态s出现的概率；在计算了所有N个证券的预期收益率后，就可以计算出证券组合的预期收益率$𝒓_𝒑$，式中$x_{i}$表示组合中证券i所占的比例，即加权系数。
 单一证券i的预期收益: $E\left(r_{i}\right)=\sum_{s=1}^{n} r_{i s} * P_{s}$
 证券组合的预期收益: $\overline{r_{p}}=\sum_{i=1}^{N} x_{i} * E\left(r_{i}\right)$
  投资组合的预期风险($𝝈_{𝒑}$)：单一证券i的预期风险为$\sigma_{\mathrm{i}} $，式中$r_{i s}$为针对状况s证券i的收益率，$P_{S}$是状态s出现的概率，$E\left(r_{i}\right) $为证券i的预期收益率 ；在计算了所有N个证券的预期风险后，就可以计算出证券组合的预期风险$\sigma_{\mathrm{p}}$，式中$\operatorname{cov}_{i j}$表示证券i和证券j的协方差，$x_{i}$和$x_{j}$表示组合中证券i和证券j所占的比例，即加权系数。
 单一证券i的预期风险: $\sigma_{\mathrm{i}}=\left(\sum_{s=1}^{n}\left[r_{i s}-E\left(r_{i}\right)\right]^{2} * P_{S}\right)^{\frac{1}{2}}$
 证券组合的预期风险: $\sigma_{\mathrm{p}}=\left(\sum_{i=1}^{N} \sum_{j=1}^{N} \operatorname{cov}_{i j} * x_{i} * x_{j}\right)^{\frac{1}{2}}$
  有效市场边界: 有效市场边界是所有最佳投资组合(Efficient Portfolio)的集合。有效前沿曲线上面的每一点都代表一个最佳投资组合。下图曲线就是有效市场边界，有效市场边界满足以下两个条件：</description>
    </item>
    
    <item>
      <title>观影：少女哪吒</title>
      <link>http://luochang212.github.io/posts/nezha/</link>
      <pubDate>Tue, 11 Jul 2017 00:00:00 +0000</pubDate>
      
      <guid>http://luochang212.github.io/posts/nezha/</guid>
      <description>青春可贵，文学高华，可是越是珍贵就越脆弱越易碎。对于一般人来说，破碎的疼痛也许还能承受得住，可是对内心敏感的人，这几乎是欲死的折磨。
我发现，影片中很多人都沉浸于某种爱好。王晓冰喜欢文学和音乐，晓冰妈喜欢舞蹈，晓冰爸外面的女人喜欢钢琴。但他们的爱好不是为了艺术，他们只是借沉浸艺术来麻痹自己。
我猜，王晓冰对家人大喊“虚伪”的原因，大概就是看不惯家人的这种自我麻痹吧？看不惯这种因为怯懦、无法承受就转向麻痹自我的态度。她不满拿音乐和舞蹈麻痹自己的母亲，不满借口“恋爱自由”为自己脱责的父亲。
每个人都为着生活痛苦、狂燥、疲惫不堪，在生活的折磨下渐渐失去勇气。因为不忍正视生活之残酷，他们选择戴上虚伪的面具，假装做出幸福的样子。但晓冰不，她个性干爽利落，追求三毛式的真诚和坦率。就算现实让她疼痛到龇牙咧嘴，她也要把那撇开的嘴角当作笑容。
影片里李小路就像一个完美的存在，她的出现对晓冰而言是上苍的馈赠。就像徐杰说小路是侠女，小路确有一股特殊的气质。英气里带点活泼，让人倍感亲切。有时紧锁的眉头和尖利的眼神又不时提醒着她已是一个有了主见的少女。是小路，让晓冰的生活里有了短暂的纯粹的欢乐。
造成晓冰痛苦的原因是多方位的，家庭的破碎，平庸又手握权力的老师的刁难，爱情的不如意，学业的不顺遂等等。对于这一切，晓冰都毅然决然、不顾后果、绝不妥协地抗争。永远高昂着头，又不幸身为下贱，这场景让我想起妙玉。
总体上讲，电影的场景感觉很碎，只给人提供一种感觉。影片没有悲壮的结局，因此对应地也缺少回响。因为没有回响，因此又显得生涩。也不知道这生涩是好是坏，虽说失掉了反复品咂的回味，但又给思考和体验留了更多空间。
（看的电影很少，还是第一次看这么文艺的电影，写一点个人的感觉 Σ Σ Σ (|||▽||| )</description>
    </item>
    
    <item>
      <title>基于蚁群算法的证券投资组合优化</title>
      <link>http://luochang212.github.io/portfolio/1/</link>
      <pubDate>Sat, 01 Jun 2019 00:00:00 +0000</pubDate>
      
      <guid>http://luochang212.github.io/portfolio/1/</guid>
      <description>在证券交易中，为了降低风险，经常使用一笔资金购买多支股票。那么，如何合理地选择证券组合，并确定每支证券的资金分配系数，以使预期风险最低，预期收益最高，就成了一种经典的金融问题 &amp;ndash; 证券投资组合优化问题。
马科维茨均值-方差模型(Markowitz Mean-Variance Model)是一种用于求解证券投资组合优化问题的数学模型。本文改进了一种多元函数连续域蚁群算法，用于求解马科维茨均值-方差模型。</description>
    </item>
    
    <item>
      <title>TSP旅行路线规划</title>
      <link>http://luochang212.github.io/portfolio/2/</link>
      <pubDate>Wed, 01 May 2019 00:00:00 +0000</pubDate>
      
      <guid>http://luochang212.github.io/portfolio/2/</guid>
      <description>旅行中的一天通常这样度过：清晨从宾馆出发，去第一个景点。第一个景点逛完，去下一个景点&amp;hellip;&amp;hellip;直到最后一个景点逛完，行程结束返回宾馆。那么如何规划一条最短的路线走完一天的行程呢？这就涉及到一个经典的运筹学问题 &amp;ndash; TSP问题。本项目用googlemaps库获取纬度和经度信息，用OR-Tools库求解TSP问题，用gmaps库可视化输出结果。利用本项目，用户只需输入景点名称，即可获得一张周游所有景点的最短路线图。可以说是一个即插即用的TSP路线规划工具。</description>
    </item>
    
    <item>
      <title>团队软件项目</title>
      <link>http://luochang212.github.io/portfolio/3/</link>
      <pubDate>Mon, 01 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>http://luochang212.github.io/portfolio/3/</guid>
      <description>每年，教学经理(Learning and Teaching Manager)都必须从老师那里收集课程信息。如果发现考试时间重叠或者太过密集，教学经理都必须通知老师调整时间。此外，教学经理还必须核对课程信息是否正确。比如各项考核分数之和是否为100分，考试时间是否与节假日重叠，作业的截至日期是否在发布日期之后等。核对完成后，还必须将每个课程的信息打印出来。这个过程非常手动，对用户也不友好。因此，团队编写了本软件。本软件能自动核对、打印、可视化课程信息，并允许用户将课程信息以邮件形式返回给教学经理，以帮助课程经理提高工作效率。</description>
    </item>
    
    <item>
      <title>自然系统的建模与仿真</title>
      <link>http://luochang212.github.io/portfolio/4/</link>
      <pubDate>Fri, 01 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>http://luochang212.github.io/portfolio/4/</guid>
      <description>本项目采用 Agent-based model 的方式，为狼-麋鹿-草生态系统建模。技术上采用了 MATLAB 面向对象编程，为狼和麋鹿的四种行为，分别是捕食、迁徙、生育、死亡，编写了规则。其中狼群拥有智能，可以利用有限信息搜索羊群，并且在头狼的带领下，狼群还表现出集群行为。给定初始条件以后，本模型会模拟生态系统的运作，输出一个时刻更新的二维图以展示各生物位置的变化情况。此外，还会输出一个折线图以表示各生物数量的变化情况。</description>
    </item>
    
    <item>
      <title></title>
      <link>http://luochang212.github.io/demo/mini-window/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://luochang212.github.io/demo/mini-window/</guid>
      <description> mini-window    Animated Side Navigation Example Click on the element below to open the side navigation.
&amp;#9776; open   ×  </description>
    </item>
    
    <item>
      <title></title>
      <link>http://luochang212.github.io/demo/sidenav/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://luochang212.github.io/demo/sidenav/</guid>
      <description>Animated Side Navigation Example    Animated Side Navigation Example Click on the element below to open the side navigation menu.
&amp;#9776; open  Resources Audio Player Video player Piano            更多视频 1 2 3         function openNav() { on(); document.getElementById(&#34;mySidenav&#34;).style.width = &#34;40%&#34;; document.body.style.backgroundColor = &#34;rgba(0,0,0,0.5)&#34;; } function closeNav() { document.getElementById(&#34;mySidenav&#34;).style.width = &#34;</description>
    </item>
    
    <item>
      <title></title>
      <link>http://luochang212.github.io/gadget/algorithms/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://luochang212.github.io/gadget/algorithms/</guid>
      <description> 算法集萃   Home Projects About  © 2019 Chang Luo --   算法集萃  1. 分配货物 有四条船，有一堆货物。往每条船上分配货物，要求每条船上货物的重量相等。 列表中的元素表示每个货物的重量。 返回 Ture 或者 False 表示是否存在满足条件的装货方式。 示例：
输入: [2,2,2,1,1] 输出: True 输入: [2,2,2,3] 输出: False 解答：
None 2. 复原IP地址[LeetCode] 给定一个只包含数字的字符串，复原它并返回所有可能的 IP 地址格式。 示例：
输入: &#34;25525511135&#34; 输出: [&#34;255.255.11.135&#34;, &#34;255.255.111.35&#34;] 解答：
None   hljs.initHighlightingOnLoad();   </description>
    </item>
    
    <item>
      <title></title>
      <link>http://luochang212.github.io/gadget/audio-player/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://luochang212.github.io/gadget/audio-player/</guid>
      <description>Audio Player    0:00 0:00                       /*! * Howler.js Audio Player Demo * howlerjs.com * * (c) 2013-2019, James Simpson of GoldFire Studios * goldfirestudios.com * * MIT License */ // Cache references to DOM elements. var elms = [&#39;track&#39;, &#39;timer&#39;, &#39;duration&#39;, &#39;playBtn&#39;, &#39;pauseBtn&#39;, &#39;prevBtn&#39;, &#39;nextBtn&#39;, &#39;playlistBtn&#39;, &#39;volumeBtn&#39;, &#39;progress&#39;, &#39;bar&#39;, &#39;wave&#39;, &#39;loading&#39;, &#39;playlist&#39;, &#39;list&#39;, &#39;volume&#39;, &#39;barEmpty&#39;, &#39;barFull&#39;, &#39;sliderBtn&#39;]; elms.</description>
    </item>
    
    <item>
      <title></title>
      <link>http://luochang212.github.io/gadget/baijiahao/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://luochang212.github.io/gadget/baijiahao/</guid>
      <description> 百家号模拟器   Home Projects About    百家号模拟器 主题：属性：生成文章      </description>
    </item>
    
    <item>
      <title></title>
      <link>http://luochang212.github.io/gadget/cv-en/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://luochang212.github.io/gadget/cv-en/</guid>
      <description>CV • Chang Luo   --   -- if( window.location.search.match( /print-pdf/gi ) ) { var link = document.createElement( &#39;link&#39; ); link.rel = &#39;stylesheet&#39;; link.type = &#39;text/css&#39;; link.href = &#39;https://cdnjs.cloudflare.com/ajax/libs/reveal.js/3.5.0/css/print/pdf.css&#39;; document.getElementsByTagName( &#39;head&#39; )[0].appendChild( link ); }  --    MathJax.Hub.Config({ tex2jax: { inlineMath: [ [&#39;$&#39;,&#39;$&#39;], [&#34;\\(&#34;,&#34;\\)&#34;] ], displayMath: [ [&#39;$$&#39;,&#39;$$&#39;], [&#34;\\[&#34;,&#34;\\]&#34;] ], processEscapes: true, processEnvironments: true }, // Center justify equations in code and markdown cells.</description>
    </item>
    
    <item>
      <title></title>
      <link>http://luochang212.github.io/gadget/cv-zh/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://luochang212.github.io/gadget/cv-zh/</guid>
      <description>CV • Chang Luo   --   -- if( window.location.search.match( /print-pdf/gi ) ) { var link = document.createElement( &#39;link&#39; ); link.rel = &#39;stylesheet&#39;; link.type = &#39;text/css&#39;; link.href = &#39;https://cdnjs.cloudflare.com/ajax/libs/reveal.js/3.5.0/css/print/pdf.css&#39;; document.getElementsByTagName( &#39;head&#39; )[0].appendChild( link ); }  --    MathJax.Hub.Config({ tex2jax: { inlineMath: [ [&#39;$&#39;,&#39;$&#39;], [&#34;\\(&#34;,&#34;\\)&#34;] ], displayMath: [ [&#39;$$&#39;,&#39;$$&#39;], [&#34;\\[&#34;,&#34;\\]&#34;] ], processEscapes: true, processEnvironments: true }, // Center justify equations in code and markdown cells.</description>
    </item>
    
    <item>
      <title></title>
      <link>http://luochang212.github.io/gadget/dictionary.js/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://luochang212.github.io/gadget/dictionary.js/</guid>
      <description>dictionary.js    hello, world! 你好，世界 hello, world! 你好，世界 &#34;My text is long and wise and it consumes a lot of interwebs.&#34;       // 获取被选中的文本 var selectedTxt = &#39;&#39;; function getSelectedTxt() { selectedTxt = &#39;&#39;; if (window.getSelection) { selectedTxt = window.getSelection().toString(); } else if (document.selection) { selectedTxt = document.selection.createRange().text; } document.getElementById(&#34;out&#34;).innerHTML = selectedTxt; } // 从JSON文件导入汉字单词 function compareWords() { $.getJSON(&#34;./src/chinese-xinhua/data/word.json&#34;, function (data) { $.</description>
    </item>
    
    <item>
      <title></title>
      <link>http://luochang212.github.io/gadget/font/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://luochang212.github.io/gadget/font/</guid>
      <description>Don&#39;t threaten me with a good time &amp;#9834;  Don&#39;t threaten me with a good time &amp;#9834;  Don&#39;t threaten me with a good time &amp;#9834;  </description>
    </item>
    
    <item>
      <title></title>
      <link>http://luochang212.github.io/gadget/gallery/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://luochang212.github.io/gadget/gallery/</guid>
      <description>* { box-sizing: border-box; } body { margin: 0; font-family: Arial, Helvetica, sans-serif; } .header { text-align: center; padding: 32px; } .row { display: -ms-flexbox; /* IE 10 */ display: flex; -ms-flex-wrap: wrap; /* IE 10 */ flex-wrap: wrap; padding: 0 4px; } /* Create two equal columns that sits next to each other */ /* 列数初始化 */ .column { -ms-flex: 25%; /* IE 10 */ flex: 25%; padding: 0 4px; } .</description>
    </item>
    
    <item>
      <title></title>
      <link>http://luochang212.github.io/gadget/happy-birthday/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://luochang212.github.io/gadget/happy-birthday/</guid>
      <description>  ┗|｀O′|┛   Happy Birthday
To
赵公公        </description>
    </item>
    
    <item>
      <title></title>
      <link>http://luochang212.github.io/gadget/how-old-are-you/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://luochang212.github.io/gadget/how-old-are-you/</guid>
      <description> 年龄可视化   Home Projects About  © 2019 Chang Luo --   A 90-Year Human Life in Months Your Age:  Inspired by Your Life in Weeks.     </description>
    </item>
    
    <item>
      <title></title>
      <link>http://luochang212.github.io/gadget/live2d/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://luochang212.github.io/gadget/live2d/</guid>
      <description>  Live2D！     隐藏   --  var message_Path = &#39;/live2d/&#39; var home_Path = &#39;http://localhost&#39;    loadlive2d(&#34;live2d&#34;, &#34;/gadget/live2d/live2d/model/live2d-widget-model-shizuku/assets/shizuku.model.json&#34;);   </description>
    </item>
    
    <item>
      <title></title>
      <link>http://luochang212.github.io/gadget/monaco-speech-editor/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://luochang212.github.io/gadget/monaco-speech-editor/</guid>
      <description>Monaco Speech Editor  --                     Explorer
 File manager     Demo You can load demos from a JSON file.
Load Demo  Tutorial Listen to the features of this application.
Quick Start   Upload
 Drop your file here
   Feature List</description>
    </item>
    
    <item>
      <title></title>
      <link>http://luochang212.github.io/gadget/mozi/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://luochang212.github.io/gadget/mozi/</guid>
      <description>墨子 | 读书笔记      墨子 原文及读书笔记
     卷一 亲士 修身 所染 法仪 七患 辞过 三辩   卷二 尚贤上 尚贤中 尚贤下   卷三 尚同上 尚同中 尚同下   卷四 兼爱上 兼爱中 兼爱下   卷五 非攻上 非攻中 非攻下   卷六 节用上 节用中 节葬下   卷七 天志上 天志中 天志下   卷九 卷十 卷十一 卷十二   介绍  作者 : 墨翟 成书时间 : [春秋 - 战国] 公元前490年-公元前221年 篇目数量 : 原有71篇，现存53篇     墨家主张“兼爱”，和西方的“博爱”相似；墨家重视技术，这也与西方不谋而合。在诸子百家中，墨家可能是最接近西方文明的学派。因此，当近代中国在西方的坚船利炮下生灵涂炭之时，中国的学者们不由开始缅怀墨子。倘若当年汉武帝不尊儒而尊墨，或许就能引领中华文明走上一条科技之路，从而免于两千多年后落得一个被列强欺凌的下场。这当然是臆想，但这却让墨家在近代意外走红，引起了关注。</description>
    </item>
    
    <item>
      <title></title>
      <link>http://luochang212.github.io/gadget/my-first-try/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://luochang212.github.io/gadget/my-first-try/</guid>
      <description>  Document  --      --      </description>
    </item>
    
    <item>
      <title></title>
      <link>http://luochang212.github.io/gadget/new-to-do-list/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://luochang212.github.io/gadget/new-to-do-list/</guid>
      <description>body { margin: 0; min-width: 250px; } /* Include the padding and border in an element&#39;s total width and height */ * { box-sizing: border-box; } /* Remove margins and padding from the list */ ul { margin: 0; padding: 0; } /* Style the list items */ ul li { cursor: pointer; position: relative; padding: 12px 8px 12px 40px; list-style-type: none; background: #eee; font-size: 18px; transition: 0.</description>
    </item>
    
    <item>
      <title></title>
      <link>http://luochang212.github.io/gadget/piano/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://luochang212.github.io/gadget/piano/</guid>
      <description>JS Piano Use your keyboard. Hover for hints. html { background: #000; font-family: &#39;Noto Serif&#39;, serif; -webkit-font-smoothing: antialiased; text-align: center; } video#bgvid { position: fixed; top: 50%; left: 50%; min-width: 100%; min-height: 100%; width: auto; height: auto; z-index: -100; transform: translateX(-50%) translateY(-50%); background-size: cover; } header { position: relative; margin: 30px 0; } header:after { content: &#39;&#39;; width: 460px; height: 15px; background: url(images/intro-div.svg) no-repeat center; display: inline-block; text-align: center; background-size: 70%; } h1 { color: #fff; font-size: 50px; font-weight: 400; letter-spacing: 0.</description>
    </item>
    
    <item>
      <title></title>
      <link>http://luochang212.github.io/gadget/plan/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://luochang212.github.io/gadget/plan/</guid>
      <description>Plan  body { font-family: &#34;Source Han Sans&#34;, &#34;San Francisco&#34;, &#34;PingFang SC&#34;, &#34;Hiragino Sans GB&#34;, &#34;Droid Sans Fallback&#34;, &#34;Microsoft YaHei&#34;, &#34;sans-serif&#34;; font-size: 17px; margin: 0; } #header { position: relative; top: 0px; left: 0px; width: 100%; height: 50px; background: #333333; box-shadow: 0 1px 2px rgba(0, 0, 0, 0.5); z-index: 2; } .navbar { position: relative; margin-left: 10%; color: white; font-size: 1.25rem; } .figure { position: relative; width: 80%; } .</description>
    </item>
    
    <item>
      <title></title>
      <link>http://luochang212.github.io/gadget/react-lifecycle-demo/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://luochang212.github.io/gadget/react-lifecycle-demo/</guid>
      <description>class MyList extends React.Component { constructor(...args) { super(...args); this.state = { loading: true, error: null, data: null }; } componentDidMount() { const url = &#39;https://api.github.com/search/repositories?q=javascript&amp;sort=stars&#39;; $.getJSON(url) .done( (value) = this.setState({ loading: false, data: value }) ).fail( (jqXHR, textStatus) = this.setState({ loading: false, error: jqXHR.status }) ); } render() { if (this.state.loading) { return Loading...; } else if (this.state.error !== null) { return Error: {this.</description>
    </item>
    
    <item>
      <title></title>
      <link>http://luochang212.github.io/gadget/read-zip-file-by-url/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://luochang212.github.io/gadget/read-zip-file-by-url/</guid>
      <description> Read a zip file demo  操作方法：  选中下方文本框; 按 Ctrl + v 粘贴链接; 点击文本框外任意区域。    Please wait.          body { background-color: rgb(238, 224, 224); }  </description>
    </item>
    
    <item>
      <title></title>
      <link>http://luochang212.github.io/gadget/show-time/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://luochang212.github.io/gadget/show-time/</guid>
      <description>现在几点了？ body { font-family: &#34;Source Han Sans&#34;, &#34;San Francisco&#34;, &#34;PingFang SC&#34;, &#34;Hiragino Sans GB&#34;, &#34;Droid Sans Fallback&#34;, &#34;Microsoft YaHei&#34;, sans-serif; font-size: 14px; color: #333; } a { text-decoration: none; color: #f66; transition-property: color; transition-duration: .2s; transition-timing-function: ease-in-out; } a:hover { color: #333; } p { margin: 1em 0; } p:empty { height: 1.5em; } main { margin: 0 5em; max-width: 48em; } h1 { margin: 1em 0; font-size: 24px; font-weight: 300; } textarea, article { width: 100%; height: 12em; margin: 2em 0; padding: .</description>
    </item>
    
    <item>
      <title></title>
      <link>http://luochang212.github.io/gadget/tic-tac-toe/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://luochang212.github.io/gadget/tic-tac-toe/</guid>
      <description>React AppYou need to enable JavaScript to run this app.!function(e){function t(t){for(var n,a,p=t[0],l=t[1],i=t[2],c=0,s=[];c</description>
    </item>
    
    <item>
      <title></title>
      <link>http://luochang212.github.io/gadget/to-do-list/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://luochang212.github.io/gadget/to-do-list/</guid>
      <description>计划表生成工具  &#34;use strict&#34;; var Items = { name: &#34;&#34;, isCheck: &#34;false&#34;, isDelete: &#34;false&#34; }; var objArray = []; var subArray = []; var submit_flag = true; var delete_flag = true; function addElement() { submit_flag = true; var item = Object.create(Items); var v = document.getElementById(&#34;myTextarea&#34;).value; item.name = v objArray.push(item); var body = &#39;#Name&#39; for (var i = 0; i &#39;; body += &#39;&#39; + index.toString(10) + &#39;&#39;; //body += &#39;&#39; + &#39;&#39; + &#39;&#39;; body += &#39;&#39; + objArray[i].</description>
    </item>
    
    <item>
      <title></title>
      <link>http://luochang212.github.io/gadget/unzip/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://luochang212.github.io/gadget/unzip/</guid>
      <description>Read a zip file demo    zip.js   A JavaScript library to zip and unzip files   Read a zip file demo   choose a zip file     choose temporary storage RAM HDD     download zip content         var _gaq = _gaq || []; _gaq.push([&#39;_setAccount&#39;, &#39;UA-15560121-15&#39;]); _gaq.push([&#39;_trackPageview&#39;]); (function () { var ga = document.</description>
    </item>
    
    <item>
      <title></title>
      <link>http://luochang212.github.io/projects/3d_scene/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://luochang212.github.io/projects/3d_scene/</guid>
      <description> 3D场景建模  更多项目 目录--  3D场景建模	 用OpenGL搭建3D室内场景模型  博客全文 --  效果展示  © 2019 Chang Luo   </description>
    </item>
    
    <item>
      <title></title>
      <link>http://luochang212.github.io/projects/machine_learning/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://luochang212.github.io/projects/machine_learning/</guid>
      <description> 机器学习  更多项目 目录--  机器学习	 用主成分分析法实现MNIST数据集下的图像分类  博客全文 --  GitHub   © 2019 Chang Luo   </description>
    </item>
    
    <item>
      <title></title>
      <link>http://luochang212.github.io/projects/markowitz_model/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://luochang212.github.io/projects/markowitz_model/</guid>
      <description>基于蚁群算法的证券投资组合优化 body { background: #FFF; font-family: Georgia, Times New Roman, Times, serif; font-size: 30px; text-align: center; margin: 0; padding: 0; } h1 { font-size: 60px; font-weight: normal; margin: 0; font-family: &#39;Chelsea Market&#39;, Georgia, serif; color: #000; line-height: 1; } h2 { font-size: 70px; font-weight: normal; margin: 0; color: #FFB000; font-family: &#39;Chelsea Market&#39;, Georgia, serif; text-transform: lowercase; } h3 { font-size: 40px; font-weight: normal; margin: 0; margin-top: 40px; text-transform: lowercase; } p { width: 960px; margin: 40px auto; color: #000; line-height: 200%; } a, a:visited { color: #000; font-size: 14px; text-decoration: none; } a:hover { text-decoration: underline; } ul { list-style: none; } .</description>
    </item>
    
    <item>
      <title></title>
      <link>http://luochang212.github.io/projects/monaco_speech_editor/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://luochang212.github.io/projects/monaco_speech_editor/</guid>
      <description> Monaco Speech Editor  更多项目 目录--   Monaco Speech Editor 	 适用于视障人群的在线代码编辑器   博客全文  Demo  © 2019 Chang Luo   </description>
    </item>
    
    <item>
      <title></title>
      <link>http://luochang212.github.io/projects/my_weibo/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://luochang212.github.io/projects/my_weibo/</guid>
      <description> 微博数据可视化  更多项目 目录--  微博数据可视化	 基于Pandas和seaborn实现的新浪微博数据可视化   博客全文  GitHub   © 2019 Chang Luo   </description>
    </item>
    
    <item>
      <title></title>
      <link>http://luochang212.github.io/projects/nature_system/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://luochang212.github.io/projects/nature_system/</guid>
      <description> 自然系统的建模与仿真  更多项目 目录--  自然系统的建模与仿真	 用MATLAB面向对象编程建立了狼、麋鹿、草生态系统模型   博客全文  GitHub   © 2019 Chang Luo   </description>
    </item>
    
    <item>
      <title></title>
      <link>http://luochang212.github.io/projects/team_software_project/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://luochang212.github.io/projects/team_software_project/</guid>
      <description> 团队软件项目  更多项目 目录--  团队软件项目	 基于PyQt5编写的课程管理软件   项目报告  项目PPT  © 2019 Chang Luo   </description>
    </item>
    
    <item>
      <title></title>
      <link>http://luochang212.github.io/projects/tsp_route/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://luochang212.github.io/projects/tsp_route/</guid>
      <description> TSP旅行路线规划  更多项目 目录--  TSP旅行路线规划	 用 Google Map Api 在谷歌地图上绘制TSP旅行路线   博客全文  GitHub   © 2019 Chang Luo   </description>
    </item>
    
  </channel>
</rss>